<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>http://www.wine-staging.com/news.xml</id><title>Wine Staging</title><updated>2016-12-27T00:00:00Z</updated><link href="/news.xml" rel="self"></link><link href="/news.html" type="text/html" rel="alternate"></link><entry><title>Release 2.0-rc3</title><link href="/news/2016-12-27-release-2.0-rc3.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-12-27-release-2.0-rc3.html</id><updated>2016-12-27T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 2.0-rc3&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 27 Dec 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 2.0-rc3 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Add basic AES-GCM support in bcrypt.&lt;/li&gt;
    &lt;li&gt;Various improvements in gdiplus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This release implements the Galois/Counter Mode (GCM) for AES in &lt;code&gt;bcrypt.dll&lt;/code&gt; which fixes the multiplayer mode of DOOM (2016). This features requires a Wine build linked against GnuTLS 3.0 or higher, which should be available on most modern distributions. To verify this, you can check the output of &lt;code style="display: inline-block;"&gt;wine --check-libs&lt;/code&gt; and search for the line referring to libgnutls. If the ABI version (the part behind &lt;code&gt;.so&lt;/code&gt;) is 28 or higher, you are ready to play DOOM online.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Bug fixes only, we are in code freeze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v2.0-rc3"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 2.0-rc2</title><link href="/news/2016-12-21-release-2.0-rc2.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-12-21-release-2.0-rc2.html</id><updated>2016-12-21T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 2.0-rc2&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 21 Dec 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 2.0-rc2 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Implement basic AES support in bcrypt.&lt;/li&gt;
    &lt;li&gt;Remove GnuTLS / CommonCrypto dependency for hash calculations in bcrypt.&lt;/li&gt;
    &lt;li&gt;Improve TIFF support in windoscodecs.&lt;/li&gt;
    &lt;li&gt;Various improvements in user32, winhttp and other dlls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Wine Staging 2.0-rc2 implements everything necessary to get DOOM (2016) running. Feel free to play around with the different features like Vulkan support and report remaining issues in the bug tracker.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Bug fixes only, we are in code freeze.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v2.0-rc2"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 2.0-rc1</title><link href="/news/2016-12-20-release-2.0-rc1.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-12-20-release-2.0-rc1.html</id><updated>2016-12-20T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 2.0-rc1&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 20 Dec 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 2.0-rc1 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Various bug fixes and improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Bug fix update of the Mono engine.&lt;/li&gt;
	&lt;li&gt;Support for IDN name resolution.&lt;/li&gt;
	&lt;li&gt;Many more Shader Model 5 operations.&lt;/li&gt;
	&lt;li&gt;Still more fixes in the regression tests.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v2.0-rc1"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;


                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.23</title><link href="/news/2016-11-16-release-1.9.23.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-11-16-release-1.9.23.html</id><updated>2016-11-16T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.23&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 16 Nov 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.23 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Improve CRL check logic (Uplay).&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;HID bus support for macOS.&lt;/li&gt;
	&lt;li&gt;Color font support in Direct2D.&lt;/li&gt;
	&lt;li&gt;More color formats in Direct3D.&lt;/li&gt;
	&lt;li&gt;Uninstallation fixes in MSI.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.23"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.22</title><link href="/news/2016-11-16-release-1.9.22.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-11-16-release-1.9.22.html</id><updated>2016-11-16T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.22&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 16 Nov 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.22 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Improved GIF encoder in windowscodecs.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;macOS clipboard support adapted to the new design.&lt;/li&gt;
	&lt;li&gt;Initial implementation of bitmap rendering in Direct2D.&lt;/li&gt;
	&lt;li&gt;More WebServices implementation.&lt;/li&gt;
	&lt;li&gt;A few more steps towards HID support.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.22"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.21</title><link href="/news/2016-10-18-release-1.9.21.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-10-18-release-1.9.21.html</id><updated>2016-10-18T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.21&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 18 Oct 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.21 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Initial GIF encoder in windowscodecs.&lt;/li&gt;
	&lt;li&gt;Support for METHOD_OUT_DIRECT ioctls.&lt;/li&gt;
	&lt;li&gt;Implementation of SetFileCompletionNotificationModes.&lt;/li&gt;
	&lt;li&gt;Ignore queued xaudio2 AL buffers after Stop.&lt;/li&gt;
	&lt;li&gt;Vulkan wrapper improvements.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The SetFileCompletionNotificationModes improvements make it possible to use the Steam Webbrowser in Windows 7 mode on Linux. You still need to pass &lt;code&gt;-no-cef-sandbox&lt;/code&gt; as parameter to Steam though.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Initial version of the HID minidriver.&lt;/li&gt;
	&lt;li&gt;Support for lists in the RichEdit control.&lt;/li&gt;
	&lt;li&gt;System tray improvements.&lt;/li&gt;
	&lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.21"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.20</title><link href="/news/2016-10-04-release-1.9.20.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-10-04-release-1.9.20.html</id><updated>2016-10-04T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.20&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 04 Oct 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.20 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improved palette support in windowscodecs.dll.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reimplementation of the clipboard API.&lt;/li&gt;
  &lt;li&gt;Message handling in WebServices.&lt;/li&gt;
  &lt;li&gt;Many more API Set libraries.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.20"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Blog: What has changed since the WineHQ integration?</title><link href="/news/2016-09-19-blog-changes-integration.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-09-19-blog-changes-integration.html</id><updated>2016-09-19T00:00:00Z</updated><author><name>Michael Müller</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Blog: What has changed since the WineHQ integration?&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Michael Müller&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Mon, 19 Sep 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
If the following text looks somewhat familiar to you, then you probably read my draft article which was unintentionally published while sharing the release notes. In the draft I was trying to respond to a user question on &lt;a href="https://www.winehq.org/pipermail/wine-devel/2016-September/114753.html"&gt;wine-devel&lt;/a&gt;, but later decided to answer the question directly as mail, and turned some part of the answer into this blog post instead.
&lt;/p&gt;

&lt;p&gt;
As some of you might know, on this day - a year ago, at the WineConf 2015, the decision was made to integrate Wine Staging into the WineHQ project. The idea was to include Staging into the development concept of the Wine project and share resources more efficiently. So after a year, I think it is time to look back and check what has changed from my point of view.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
The best way to do this is by looking at the WineHQ integration &lt;a href="/news/2015-09-25-winehq-integration.html"&gt;announcement&lt;/a&gt; and to see how the individual points were realized.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
		&lt;b&gt;Bug tracker changes:&lt;/b&gt;
		&lt;p&gt;
			The aim was to retire the Wine Staging bug tracker and maintain all bugs at the &lt;a href="https://bugs.winehq.org/"&gt;WineHQ&lt;/a&gt; bug tracker. This pretty much turned out as expected. There is now a Wine Staging category for regressions and bugs only present in Wine Staging. All regular Wine bugs fixed in Wine Staging are marked as STAGED, and the bug status is automatically updated by our release script. In order to find out which bugs have been fixed by Wine Staging, just take a look at the STAGED &lt;a href="https://bugs.winehq.org/buglist.cgi?bug_status=STAGED&amp;product=Wine&amp;query_format=advanced&amp;order=changeddate%20DESC
"&gt;bug list&lt;/a&gt;.
		&lt;/p&gt;

		&lt;p&gt;
			By retiring our bug tracker, we unfortunately lost our old way of officially sending patches to Wine Staging and the idea of using the WineHQ bug tracker for this purpose was rejected. The problem is not completely solved yet - but, I am also not aware of anyone who didn't find a way to send us his patches, so it is a minor issue.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;b&gt;Staging patch status:&lt;/b&gt;
		&lt;p&gt;
			The original idea was to add a new status 'Staging' on the patch submission &lt;a href="http://source.winehq.org/patches/"&gt;page&lt;/a&gt;, to inform the author, that the patch is too experimental and he should try to add it to Wine Staging first. This idea was replaced by simply assigning a Wine Staging maintainer to the patch.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;b&gt;&lt;code&gt;Signed-Off-By&lt;/code&gt; header:&lt;/b&gt;
		&lt;p&gt;
			This is probably the biggest and most important change, even though it is just another line in the header of a patch. Since the start of the Wine Staging project, we have added a lot of patches from different contributors, either because they were rejected or because the authors didn't think that their code was good enough yet. Without help of the original author, those patches unfortunately often stayed in Wine Staging for a long time. Some of them needed editing, which either resulted in the author losing his authorship or changes were added under his name without his knowledge.
		&lt;/p&gt;

		&lt;p&gt;
			In order to fix the problem, we suggested to add a &lt;code&gt;Signed-Off-By&lt;/code&gt; header back then. Every time someone changes a patch he adds his own &lt;code&gt;Signed-Off-By&lt;/code&gt; line. This way everyone is mentioned in the patch and it is more clear who needs to be blamed when something breaks ;-). In a lot of cases this made upstreaming much easier, because everyone with enough knowledge in a specific area can now review a patch, fix remaining problems and send it upstream without any trouble. Besides improving the Wine Staging situation, it also helped the development version of Wine to include PulseAudio support and other smaller features.
		&lt;/p&gt;
		&lt;p&gt;
			Overall, getting patches upstream is faster now and more work is done directly on the wine-devel mailing list. Sebastian for example focuses more on helping developers with their smaller patches sent to wine-patches, while in the past, some of their work probably would have ended up in Wine Staging instead. As a result, Wine Staging changed its focus towards adding and maintaining more big and complex patches like the CSMT or CUDA support, while we're trying to get small patches upstream directly.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;b&gt;Binary packages:&lt;/b&gt;
		&lt;p&gt;
			At WineConf 2015 we offered to build packages for the development version of Wine since many distributions don't catch up with the biweekly release cycle. This works as announced and you can get your Wine Staging / Development packages from the official WineHQ &lt;a href="https://www.winehq.org/download"&gt;download&lt;/a&gt; website. The available distributions have changed a bit since the announcement, as Arch Linux for example decided to integrate Wine Staging into their official repositories, but otherwise there were not many changes for our users. It is worth to mention though that our Mac OS X packages are now properly signed with an OS X developer certificate, as a result of the WineHQ integration and cooperation with the Software Freedom Conservancy.
		&lt;/p&gt;
		&lt;p&gt;
			It remains an open question how to deal with packages for the stable branch of Wine. There were already some user requests in the past, but so far we hesitated to fulfill their wish. First of all, most distributions already provide stable builds and it is generally not a good idea to duplicate work. Secondly, our build servers also don't have unlimited resources. So far we are maintaining 20 build VMs and there are still requests to support more distributions.
		&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
		&lt;b&gt;Developer perspective:&lt;/b&gt;
		&lt;p&gt;
			From my perspective the most important change is the use of &lt;code&gt;Signed-Off-By&lt;/code&gt; headers, as explained in one of the previous paragraphs. Otherwise the situation is pretty much like I predicted in the announcement. The maintainers of the project are the same people like a year ago, and we are still trying to bring the best experience to our users.
		&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
To sum it up, the changes of the development process decided at WineConf 2015 indeed had the desired effect. Many features can now get upstream faster and more directly than in the past. From the perspective of a Wine Staging user, I guess there were mostly positive changes. There is no need to worry about using the wrong bug tracker anymore, the OS X packages are now signed and some distributions also decided to provide packages for Wine Staging in their official repositories. There are still some minor issues left to be resolved, but overall I think we are on a good way.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.19</title><link href="/news/2016-09-18-release-1.9.19.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-09-18-release-1.9.19.html</id><updated>2016-09-18T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.19&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Mon, 19 Sep 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.19 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Implementation of CIF reader and Active Setup download functionality (inseng.dll).&lt;/li&gt;
  &lt;li&gt;Allow creation of 32 bit Wine prefix in an existing directory.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With Wine Staging 1.9.19 the WINEARCH=win32 setting is no longer ignored if the target directory already exists and wasn't used by Wine yet. The inseng.dll changes allow the DirectX web installer to work and fixes in the Setup API prevent repeated executions of the DirectX installer every time a game is started in Steam.  
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initial version of a udev bus driver for HID.&lt;/li&gt;
  &lt;li&gt;Various improvements in joystick support.&lt;/li&gt;
  &lt;li&gt;Initial implementation of DC rendering in Direct2D.&lt;/li&gt;
  &lt;li&gt;Improved metafile support in GDI+.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.19"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;
 
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.18</title><link href="/news/2016-09-11-release-1.9.18.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-09-11-release-1.9.18.html</id><updated>2016-09-11T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.18&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 11 Sep 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
The Wine Staging release 1.9.18 is now available.
&lt;/p&gt;

&lt;p&gt;
What's new in this release:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experimental support for 1D Textures in D3D10 and 11.&lt;/li&gt;
  &lt;li&gt;Various improvements for windowscodecs and gdiplus palette functions.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In addition, Wine Staging users will also benefit from the following changes merged in the development branch:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for multiple kernel drivers in a single process.&lt;/li&gt;
  &lt;li&gt;More WebServices reader support.&lt;/li&gt;
  &lt;li&gt;Various improvements in joystick support.&lt;/li&gt;
  &lt;li&gt;Some more work towards the Direct3D command stream.&lt;/li&gt;
  &lt;li&gt;GDI performance improvements.&lt;/li&gt;
  &lt;li&gt;Improved IME window handling.&lt;/li&gt;
  &lt;li&gt;Compatibility fixes in the clipboard support.&lt;/li&gt;
  &lt;li&gt;Various bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The source is available &lt;a href="https://github.com/wine-compholio/wine-staging/releases/tag/v1.9.18"&gt;now&lt;/a&gt;. Binary packages are in the process of being built, and will appear soon at their respective &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation"&gt;download locations&lt;/a&gt;.
&lt;/p&gt;
 
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.11</title><link href="/news/2016-05-19-release-1.9.11.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-05-19-release-1.9.11.html</id><updated>2016-05-19T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.11&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 31 May 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.9.11 has been released this weekend. This release is a small update containing only a few improvements targeting different applications.
&lt;/p&gt;

&lt;p&gt;
Besides updating the existing patches (including CSMT) to be compatible with the current development release of Wine, this release contains only a few additions. The most noticeable one is a patch to fix a crash when launching DOOM. However, this doesn't mean that the whole DRM protection is working yet, but it is a first step. We also fixed a regression that caused problems when creating threads on FreeBSD and could also lead to issues on some Linux systems. A list containing all newly added patches is available below.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;ul&gt;
	&lt;li&gt;Do not sort the InMemoryOrderModuleList by memory addresses (DOOM, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40623"&gt;Wine Bug #40623&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for setupapi.CM_Get_DevNode_Status (DVDFab, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40691"&gt;Wine Bug #40691&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Provide DeviceID, Location and PortName for printers (HP Diagnostic, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40539"&gt;Wine Bug #40539&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement DrawDibProfileDisplay in msvideo.dll16&lt;/li&gt;
	&lt;li&gt;Workaround for Windows 3.1 apps which call LoadImage(LR_LOADFROMFILE) with a resource id (Okad2, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24963"&gt;Wine Bug #24963&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for ntoskrnl.IoStopTimer&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.10</title><link href="/news/2016-05-18-release-1.9.10.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-05-18-release-1.9.10.html</id><updated>2016-05-18T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.10&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 18 May 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
We are happy to announce the release of Wine Staging 1.9.10. This updates brings back the support for CSMT and contains bug fixes for multiple applications.
&lt;/p&gt;

&lt;p&gt;
The support for CSMT was removed in Wine Staging 1.9.6 due to differences between the original CSMT patchset and the new design included in the development version of Wine. Maintaining the old CSMT patchset, which was based on surfaces, was not feasible any more while the rest of Wine's DirectX stack was rewritten to use textures instead. For those who rely on the CSMT feature, we have some good news though. In the mean time the complete CSMT patchset has been rewritten to use the new texture approach and is now included in Wine Staging 1.9.10. You can therefore safely update from 1.9.5 and continue to enjoy all the performance improvements. Stefan Dösinger, the author of the patchset, also indicated that he fixed some bugs during the update, so it might be a good idea to retest applications which previously didn't work well with CSMT.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
As usual this release also contains many small improvements. It fixes a problem which prevents Uplay from connecting to the server and therefore making it unusable. Two bugs have been fixed in wininet which affect multiple applications (TrackMania United Forever, Rocket League, Warframe). The behavior of UnmapViewOfFile has been altered to correctly emulate the selected Windows version.
&lt;/p&gt;

&lt;p&gt;
The following list contains all newly added features and bug fixes.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Resize buffer when call to InternetCanonicalizeUrlW fails in InternetCrackUrlW (Warframe, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40598"&gt;Wine Bug #40598&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement GdipGetMetafileHeaderFromMetafile (Sketchpad 5, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=27415"&gt;Wine Bug #27415&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Preserve custom colors between subitems for listview control (DOSCenter, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38941"&gt;Wine Bug #38941&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Extend a vtable offset before calling 64-bit DispCallFunc() for a 32-bit typelib (x64 InstallShield - 3DMark06 (WOW64), &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35268"&gt;Wine Bug #35268&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly handle invalid parameters in CharToOem* and OemToChar* APIs (Info-ZIP 3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21891"&gt;Wine Bug #21891&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement support for fs segment in GetThreadSelectorEntry&lt;/li&gt;
	&lt;li&gt;Set buffer size to zero when InitializeSecurityContextW returns no data (Uplay, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40271"&gt;Wine Bug #40271&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return synchronously from InternetReadFile if there is no more data to read (Trackmania United Forever / Rocket League, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40536"&gt;Wine Bug #40536&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;UnmapViewOfFile should fail on Win9x when addr is not the base address of a mapping (Kings Quest 8, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=2905"&gt;Wine Bug #2905&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;NtUnmapViewOfSection should succeed for any address in the mapped range&lt;/li&gt;
	&lt;li&gt;Implement msvcrt._fstat32i64&lt;/li&gt;
	&lt;li&gt;Update Wine Gecko to version 2.47-beta1&lt;/li&gt;
	&lt;li&gt;Recognize bump luminance format when loading dds file&lt;/li&gt;
	&lt;li&gt;DialogBoxParam should return -1 when dialog control creation fails (Winrar, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40025"&gt;Wine Bug #40025&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.9</title><link href="/news/2016-05-03-release-1.9.9.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-05-03-release-1.9.9.html</id><updated>2016-05-03T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.9&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 03 May 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.9.9 was released yesterday. This updates brings some smaller improvements.
&lt;/p&gt;

&lt;p&gt;
During the last two weeks, instead of working on new features, a lot of effort was put into cleaning up, improving, and upstreaming patches which already have been tested sufficiently. We are glad to say that more than 30 patches have been accepted which is roughly about 10% of all commits added in Wine 1.9.9. This doesn't mean though that we didn't add any new features, just a bit less than usual as you can see below.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Please note that this release does no longer contain the libcef syscall workaround which has been added in 1.7.53. The patch was originally included to solve the problem that Steam does no longer show any web pages. The solution was not perfect though as it only worked in a pure 32 bit Wine prefix and some users also reported that the workaround is unreliable. Since Steam introduced a parameter (&lt;code&gt;-no-cef-sandbox&lt;/code&gt;) to disable the problematic sandboxing mechanisms, we decided to drop this rather big patch. We recommend our users to use the command line switch which should work for both 32-bit and 64-bit prefixes.
&lt;/p&gt;

&lt;p&gt;
The following list contains all newly added features and bug fixes.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Avoid buffer overflow in mono print handler for large strings&lt;/li&gt;
	&lt;li&gt;Fill stack with meaningful values in call_process_entry mis-align workaround (MoleBox Ultra v4, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24374"&gt;Wine Bug #24374&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Create DIB section in OleLoadPicture (MSWT Kart 2004, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39474"&gt;Wine Bug #39474&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement support for loading and saving EMF to IPicture interface (XLPro3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40523"&gt;Wine Bug #40523&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve wmic cmd line parser and add support for path command&lt;/li&gt;
	&lt;li&gt;Postpone setting lpstrFileTitle in GetSaveFileNameW (BDCraft Cubik, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38400"&gt;Wine Bug #38400&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Postpone setting lpstrFileTitle in GetSaveFileNameA (Knytt Stories editor, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35200"&gt;Wine Bug #35200&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement IKsControl stub subinterface for SynthPort (Chessbase Ludwig 3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30105"&gt;Wine Bug #30105&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.8</title><link href="/news/2016-04-19-release-1.9.8.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-04-19-release-1.9.8.html</id><updated>2016-04-19T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.8&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 19 Apr 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Time for another release! Wine Staging 1.9.8 is now available. This version contains improvements for 64 bit support and MSYS2.
&lt;/p&gt;

&lt;p&gt;
Running 64 bit Windows software on Linux using Wine is nothing special for most users. Although there might be some smaller bugs left that only affect 64 bit software, the basic concept is working fine. 64-bit support for OS X is a different story though. The usage of the GS segment register in Windows applications conflicts with the OS X system libraries. This basically means that Wine and OS X want to store different values at the same location. Fixing or working around this problem is difficult and it is still unknown if a fully compatible and efficient solution can be achieved. Nevertheless, there are ways to improve compatibility without implementing a complete solution.
&lt;/p&gt;

&lt;p&gt;
This release adds an experimental patch to improve support for running 64-bit applications on OS X by partially fixing the issue. If you are interested in more technical details, you can also take a look at the Wine devel mailing list discussions &lt;a href="https://www.winehq.org/pipermail/wine-devel/2016-April/112662.html"&gt;[1]&lt;/a&gt; and &lt;a href="https://www.winehq.org/pipermail/wine-devel/2016-April/112664.html"&gt;[2]&lt;/a&gt;. Although the feedback was very promising so far, we would be happy to see some additional testers. Check out the &lt;a href="https://dl.winehq.org/wine-builds/macosx/download.html"&gt;WineHQ OS X download page&lt;/a&gt; (either use the installer or grab a 64-bit tarball) if you want to give it a try.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Wine Staging 1.9.8 also continues the ongoing effort to improve compatibility with MSYS2 and adds several enhancements regarding stack handling and exception unwinding on 64-bit. Although running typical Unix applications in Wine does not sound like a high priority use-case for the average user, the low level nature of MSYS2 has already exposed a whole bunch of bugs in Wine. Fixing those can also improve compatibility with proprietary applications that are much harder to debug.
&lt;/p&gt;

&lt;p&gt;
As usual there were also various other small fixes which are included in the list below.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add stubs for QUERY_TYPE_SO_STATISTICS and QUERY_TYPE_SO_OVERFLOW (3DMark Vantage, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=20776"&gt;Wine Bug #20776&lt;/a&gt;)&lt;/li&gt;&lt;/li&gt;
	&lt;li&gt;Various improvements in wineps.drv for Adobe PageMaker compatibility&lt;/li&gt;
	&lt;li&gt;Use a separate stack when starting new threads (MSYS2)&lt;/li&gt;
	&lt;li&gt;Ignore invalid exit_frame when exiting thread (MSYS2)&lt;/li&gt;
	&lt;li&gt;Trigger stack overflow exception earlier on x86_64 (MSYS2)&lt;/li&gt;
	&lt;li&gt;Improve compatibility of 64-bit support for OS X&lt;/li&gt;
	&lt;li&gt;Add support for async handling in InternetReadFile (ManiaPlanet / Trackmania 2)&lt;/li&gt;
	&lt;li&gt;Fix a bug when exception handling triggers stack guard page (MSYS2)&lt;/li&gt;
	&lt;li&gt;Fix handling of wildcard paths in GetShortPathName and GetLongPathName (The Guild 2, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39355"&gt;Wine Bug #39355&lt;/a&gt;)&lt;/li&gt;&lt;/li&gt;
	&lt;li&gt;Add support for loading PNG icon files (.NET 4.6, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38959"&gt;Wine Bug #38959&lt;/a&gt;)&lt;/li&gt;&lt;/li&gt;
	&lt;li&gt;Add feclient.dll stub (Visual C++ Build Tools 2015, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40451"&gt;Wine Bug #40451&lt;/a&gt;)&lt;/li&gt;&lt;/li&gt;
	&lt;li&gt;Improve handling of builtin frames for x86_64 when switching stacks (MSYS2)&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.7</title><link href="/news/2016-04-03-release-1.9.7.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-04-03-release-1.9.7.html</id><updated>2016-04-03T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.7&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 3 Apr 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Today we released Wine Staging 1.9.7. This version contains improvements for shell32, Video For Windows and several smaller fixes.
&lt;/p&gt;

&lt;p&gt;
When you are using a software which displays a file list, for example a file manager or CD burning software, then chances are high that this program makes use of shell32. This component is mainly used by the Explorer on Windows and provides functions to iterate through the file system, to display the typical right click menu (copy, cut, paste, ...) as well as the property dialogs for folders and files. The implementation in Wine is still work in progress and lacks some fundamental features. In this release we fixed a bug that files couldn't be copied and added support for pasting files/folders into a selected folder (using the right click menu on a folder). We also improved support for moving files (cut, paste), so far the original file was not deleted after the copy progress finished.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
This release also contains various multimedia related improvements. Several bugs have been fixed in Video For Windows (VFW), the predecessor of Direct Show. This API is mostly used by older games to display intro videos or cut sequences. We also fixed a bug in the Media Foundation API (the successor of Direct Show) which caused Origin to crash after the installation of a game has finished.
&lt;/p&gt;

&lt;p&gt;
As usual there were also many other small fixes which are included in the list below.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Enable the correct dialog owner in DIALOG_DoDialogBox (mIRC, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40282"&gt;Wine Bug #40282&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement support for converting 16 bit depth to 24 bit in msvidc32 (Lifeforce demo, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=14695"&gt;Wine Bug #14695&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow 320x240 as supported resolution in desktop mode (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=32979"&gt;Wine Bug #32979&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix implementation of ICGetDisplayFormat (Zak McKracken - Between Time and Space, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=23175"&gt;Wine Bug #23175&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Handle stack guard pages on x86_64 (MSYS)&lt;/li&gt;
	&lt;li&gt;Improve compatibility of IMILBitmapSource interface (.NET 3.5, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34764"&gt;Wine Bug #34764&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix IStream::Read() return value for partial reads&lt;/li&gt;
	&lt;li&gt;Implement image hash verification in WinVerifyTrust&lt;/li&gt;
	&lt;li&gt;Implement oleaut32.OleLoadPictureFile (GoodSync)&lt;/li&gt;
	&lt;li&gt;Fix return value of RegNotifyChangeKeyValue for pending events (.NET 2, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39863"&gt;Wine Bug #39863&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add support for paste in item context menu (Total Commander, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34319"&gt;Wine Bug #34319&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix implementation of cut file operation (Total Commander, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34322"&gt;Wine Bug #34322&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Recognize cut/copy/paste verb strings in context menus (Total Commander, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34321"&gt;Wine Bug #34321&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add 'New' context menu handler registry entry for directories (CDBurnerXP, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=29523"&gt;Wine Bug #29523&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add implementation for fsutil.exe hardlink command (FINDDUPE, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=22749"&gt;Wine Bug #22749&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for ntoskrnl.IoGetDeviceAttachmentBaseRef&lt;/li&gt;
	&lt;li&gt;Return stub interface from mf.MFCreateMediaSession (Origin, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39367"&gt;Wine Bug #39367&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.6</title><link href="/news/2016-03-21-release-1.9.6.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-03-21-release-1.9.6.html</id><updated>2016-03-21T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.6&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Mon, 21 Mar 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
We are happy to announce the release of Wine Staging 1.9.6. This version adds support for Vulkan and fixes for various other bugs.
&lt;/p&gt;

&lt;p&gt;
This release adds a first version of a Vulkan wrapper to make the Vulkan API accessible to applications running in Wine. The work was started by Erich E. Hoover and later finished by other Wine Staging maintainers. The code translates the Windows specific surface extensions to the corresponding X11 / XCB extensions and passes the remaining functions on the host Vulkan library. Although this seems to be an easy task on first sight, there are various pitfalls that make this wrapper more complicated than you might think. While the Vulkan API is almost binary compatible in 64 bit (except the differences in the calling convention), properly translating Vulkan calls on 32 bit turned out to be a bit difficult.
&lt;/p&gt;

&lt;p&gt;
The biggest problem on 32-bit is caused by alignment differences when using 64 bit integers in structures. On Windows a 64 bit integer is aligned on a 8 byte memory address, while compilers on most other systems only align them on a 4 byte boundary. Passing such a structure without conversion to the host library would cause problems and eventually lead to a crash. As the Vulkan API contains more than 120 structures, most of the time was spent to implement structure and array conversions, which make the 32-bit version slightly slower than the 64-bit version. The final implementation adds about 10.000 lines of code to the Wine Staging code base.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Although this is the first beta version, we are happy to say that this version already passes all (~80300) Khronos Vulkan conformance tests (32 + 64 bit) when using a compliant driver on the host system. We also tested the windows version of the game "The Talos Principle" and various samples from the LunarG SDK and so far, we aren't aware of any bugs. If you still encounter any issues, feel free to open a &lt;a href="http://bugs.winehq.org/"&gt;bug report&lt;/a&gt;. Here is a screenshot showing The Talos Principle running in Wine Staging using the Vulkan option:
&lt;/p&gt;

&lt;div style="margin-top:1.5em; margin-bottom: 1.5em; text-align: center;"&gt;
	&lt;a href="/images/talos.png" target="_blank"&gt;&lt;img style="max-width: 100%;" src="/images/talos_small.png"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;
Before talking about the smaller additions, there is another important announcement regarding this release. We are aware that a big group of people uses Wine Staging because of the CSMT (commandstream multithreading) patchset, and we are glad to see that there is again (slow, but steady) progress to include this feature in the development version of Wine. The whole process also has a downside though. Various design goals have been changed during the upstreaming process and we are currently not aware of any fully functional patchset, which provides all CSMT features. So far the multithreading part, which contains the actual performance improvement, is not upstream yet and the remaining patches are getting more and more incompatible. Working around all those problem (which we did in the last releases) is not possible in the long term, and we therefore decided to disable CSMT support in this release. If you depend on this feature, you should not update to Wine Staging 1.9.6. The feature might be available in future versions again, so don't forget to check the release notes.
&lt;/p&gt;

&lt;p&gt;
As mentioned at the beginning, we also added several smaller fixes. There are several patches to improve the compatibility with Python 3.5 as well as patches to improve Wines &lt;code&gt;gdiplus.dll&lt;/code&gt; implementation. Here is the usual list of all changes, without those which already have been accepted upstream:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Do not update iosb.Status after FSCTL_PIPE_LISTEN call (Python 3.5)&lt;/li&gt;
	&lt;li&gt;Implement GdipCreateMetafileFromStream (Captvty v3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40325" target="_blank"&gt;Wine Bug #40325&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement support for WICPixelFormat32bppGrayFloat (SlovoEB 2.1, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=36517" target="_blank"&gt;Wine Bug #36517&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fake success in dwmapi.DwmSetWindowAttribute function (Epic Games Launcher)&lt;/li&gt;
	&lt;li&gt;Implement support for Vulkan (The Talos Principle, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40164" target="_blank"&gt;Wine Bug #40164&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix pointer to custom dialog control data (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40303" target="_blank"&gt;Wine Bug #40303&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Populate CA certificate store in registry (Python 3.5)&lt;/li&gt;
	&lt;li&gt;Fix handling of GetOverlappedResult when status remains STATUS_PENDING (Python 3.5)&lt;/li&gt;
	&lt;li&gt;Implement semi-stub for ws2_32 DisconnectEx (Python 3.5)&lt;/li&gt;
	&lt;li&gt;Implement wuauserv dummy service (Python 3.5 installer)&lt;/li&gt;
	&lt;li&gt;Fix handling of INTERNET_INVALID_PORT_NUMBER in HttpOpenRequestW (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40169" target="_blank"&gt;Wine Bug #40169&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement windowscodecs.WICCreateBitmapFromSection(Ex) (Paprika Recipe Manager, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40273" target="_blank"&gt;Wine Bug #40273&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement a better stub for IPicture::SaveAsFile (JawsEditor, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=8532" target="_blank"&gt;Wine Bug #8532&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement query operation in reg.exe (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24017" target="_blank"&gt;Wine Bug #24017&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.5</title><link href="/news/2016-03-08-release-1.9.5.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-03-08-release-1.9.5.html</id><updated>2016-03-08T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.5&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 8 Mar 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Time for another release - Wine Staging 1.9.5 is now available. This version improves the compatibility with MSYS and with various older games.
&lt;/p&gt;

&lt;p&gt;
In continuation of our effort in the last version, this Wine Staging release adds a bunch of improvements mainly useful for older games and applications. Although probably not interesting for everyone, we improved the compatibility with Windows 95/98/ME in order to run software targeting these Windows versions. This includes miming the behavior of older Windows versions more correctly when selecting them in &lt;code&gt;winecfg&lt;/code&gt;. So don't forget to alter the settings accordingly before trying out older games.
&lt;/p&gt;

&lt;p&gt;
Besides some improvements for MSYS, this release also implements various additional functions in Wines &lt;code&gt;setupapi.dll&lt;/code&gt;. Various fixes in preparation for loading multiple drivers into a single process, a &lt;code&gt;ntoskrnl.exe&lt;/code&gt; bug which has been in Wine for a very long time, have already been accepted upstream and are not separately listed below. This is ongoing work though, so hopefully the next release will support loading multiple drivers into the same address space, making it possible to implement layered drivers as a next step.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Here is a list of all changes, without those which already have been accepted upstream:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Return ERROR_FILE_NOT_FOUND for Win 9X when a file was not found in GetFileVersionInfoSizeEx (DAO 3.5)&lt;/li&gt;
	&lt;li&gt;Correctly return VFF_CURNEDEST flag in VerFindFileA (JCS: IAF)&lt;/li&gt;
	&lt;li&gt;Fix parsing of inf files containing garbage at the beginning of file (DAO 3.5)&lt;/li&gt;
	&lt;li&gt;Properly set ddsOldCaps field in ddraw7_GetCaps&lt;/li&gt;
	&lt;li&gt;Fix handling of DDL_DRIVES flag in user.exe16.DlgDirList (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=18734"&gt;Wine Bug #18734&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not reassign default handles after they got closed (Mordor, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=19184"&gt;Wine Bug #19184&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;setupapi DelReg should recursively delete registry keys (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=13548"&gt;Wine Bug #13548&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add implementation for setupapi.SetupAddToDiskSpaceListA/W (DAO 3.5)&lt;/li&gt;
	&lt;li&gt;Add implementation for setupapi.SetupQueryDrivesInDiskSpaceListA/W (DAO 3.5)&lt;/li&gt;
	&lt;li&gt;Add implementation for setupapi.SetupAdd{Install}SectionToDiskSpaceListA/W (DAO 3.5)&lt;/li&gt;
	&lt;li&gt;Avoid generating Makefiles for disabled rules (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40253"&gt;Wine Bug #40253&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Assign random name when trying to create Window Station without name (MSYS)&lt;/li&gt;
	&lt;li&gt;Translate all invalid console handles into usable DOS handles (NFS3 autorun, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=7106"&gt;Wine Bug #7106&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Reserve some more stack space in call_thread_func_wrapper (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40068"&gt;Wine Bug #40068&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix implementation of compobj.dll16.StringFromGUID2 function&lt;/li&gt;
	&lt;li&gt;Accept d3d1 and d3d2 versions of D3DFINDDEVICERESULT in IDirect3D_FindDevice (Carmageddon 2)&lt;/li&gt;
	&lt;li&gt;Do not crash in Win 9X mode when an invalid device ptr is passed to MCI_OPEN&lt;/li&gt;
	&lt;li&gt;Set ERROR_DLL_NOT_FOUND as error code for Win 9X instead of ERROR_MOD_NOT_FOUND in load_library (The Fifth Element)&lt;/li&gt;
	&lt;li&gt;Replicate Windows behavior of WM_SETTEXT handler regarding WM_CTLCOLOR* messages (SonicStage 3/4, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=25790"&gt;Wine Bug #25790&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix handling of WM_NOTIFY messages in PostThreadMessage (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40244"&gt;Wine Bug #40244&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Announce WMP 12 as installed Windows feature (iCloud)&lt;/li&gt;
	&lt;li&gt;Check for invalid filename pointers in CreateFileA in Win 9x mode (Test Drive 5)&lt;/li&gt;
	&lt;li&gt;Add missing resources for IE6 buttons (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40236"&gt;Wine Bug #40236&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix multiple issues in mmsystem.dll16 when translating MIDI messages (Prosound, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40024"&gt;Wine Bug #40024&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement emulation of GDT and LDT access in Win98 mode (Nuclear Strike, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30237"&gt;Wine Bug #30237&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Set DSCAPS_CERTIFIED flags in dsound (Small Soldiers)&lt;/li&gt;
&lt;/ul&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.4</title><link href="/news/2016-02-23-release-1.9.4.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-02-23-release-1.9.4.html</id><updated>2016-02-23T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.4&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 23 Feb 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
A couple of hours ago, Wine Staging 1.9.4 was released. This update brings improvements for better window handling when using the &lt;code&gt;winex11&lt;/code&gt; driver, and fixes for various games and applications.
&lt;/p&gt;

&lt;p&gt;
One of the main goals of Wine is to integrate Windows applications as seamlessly as possible into the host system. This release improves the integration when using the X11 backend and an application tries to bring a specific window to the foreground. This might for example be used to bring a progress dialog to the front after the operation has finished. The request is now forwarded to the window manager by sending a &lt;code&gt;_NET_ACTIVE_WINDOW&lt;/code&gt; message.
&lt;/p&gt;

&lt;p&gt;
Besides various improvements for Wines &lt;code&gt;d3dx9_36&lt;/code&gt; implementation, this release also contains fixes the GOG Galaxy client, which previously took a very long time to start. As a side-effect, this also fixes the problem that the auto-updater didn't get active during the startup. Other applications which have been improved are for example Evoland (still needs CSMT, but otherwise works fine) and Adobe After Effects 4.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Below is a list of all changes, without those which already have been accepted upstream:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Implement advapi32.RegCopyTree{A,W} (MAXQDA, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39690" target="_blank"&gt;Wine Bug #39690&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve WTSQueryUserToken stub (GOG Galaxy, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39663" target="_blank"&gt;Wine Bug #39663&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Preserve beginning of extra data for MDI windows (Adobe After Effects 4, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=15473" target="_blank"&gt;Wine Bug #15473&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use assembler wrapper to call MONITORENUMPROC callback (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24421" target="_blank"&gt;Wine Bug #24421&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add support for paths on a metafile HDC (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39185" target="_blank"&gt;Wine Bug #39185&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix enumeration of display driver properties using setupapi (Evoland, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35345" target="_blank"&gt;Wine Bug #35345&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub program for shutdown.exe (various GOG installers)&lt;/li&gt;
	&lt;li&gt;Fix calling convention of glDebugMessageCallback callback function (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38402" target="_blank"&gt;Wine Bug #38402&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Forward activate window requests to WM using _NET_ACTIVE_WINDOW (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=2155" target="_blank"&gt;Wine Bug #2155&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement d3dx9_36.D3DXCreateTextureShader with stub interface (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=11062"&gt;The Void&lt;/a&gt;, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=37919" target="_blank"&gt;Wine Bug #37919&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement stub for d3dx9_36.D3DXFillCubeTextureTX (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=11062"&gt;The Void&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Initial implementation for d3dx9_36.D3DXDisassembleShader (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=11062"&gt;The Void&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve invalid parameter handling in NtAccessCheck (MSYS)&lt;/li&gt;
	&lt;li&gt;Silence repeated FIXME message in Parser_QueryInterface (Independence War 2)&lt;/li&gt;
	&lt;li&gt;MessageBox should be topmost when MB_SYSTEMMODAL style is set&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.9.3</title><link href="/news/2016-02-10-release-1.9.3.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-02-10-release-1.9.3.html</id><updated>2016-02-10T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.9.3&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 10 Feb 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Yesterday we released Wine Staging 1.9.3, which includes compatibility fixes for a bunch of older games.
&lt;/p&gt;

&lt;p&gt;
Before talking about the changes, I would like to apologize that there weren't any release notes since 1.8. I just didn't had much time lately to write them, but this was unrelated to the actual development progress of Wine Staging. In fact we added 116 new patches since the last release notes. We are also currently working on a website which displays the changes between different versions of Wine Staging (fixed bugs, added patchsets, removed patchsets, history of specific patches, ...). The site should hopefully be online soon, so that you can already see all changes without waiting for me to write the release notes. :-)
&lt;/p&gt;

&lt;p&gt;
As already mentioned in the first line, in this release we fixed compatibility with some older games, including some 16 bit applications. For those who are interested in more details how the general 16 bit support works in Wine and what exactly has been fixed, I have written a separate &lt;a href="/news/2016-02-10-blog-wine-16bit.html"&gt;blog post&lt;/a&gt; explaining those details. I might provide more of such "behind the scenes" posts in the future if my times allows it. To keep it short for the release notes: We fixed several issues when using the 16 bit version of the avifile.dll and msvideo.dll.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Besides those fixes for older games, there were also various contributions to improve support for more recent software. We for example fixed an issue when using QT based applications (like Battle.Net) in wine and your host system at the same time. Some settings of QT can be controlled through environment variables like &lt;code&gt;QT_PLUGIN_PATH&lt;/code&gt; and when you are starting wine through a QT application, either direct (QT Terminal) or indirect (QT desktop environment), chances are high that such environment variables are set. Unfortunately some of those QT related environment variables have different meanings for Linux and Windows applications, which can make QT applications refuse to start. Wine Staging 1.9.3 now filters out QT environment variables and doesn't forward them to windows applications. If you still want to pass a QT environment variable from your host system to Wine, you need to prepend &lt;code&gt;WINE&lt;/code&gt; in front of them (for example &lt;code&gt;WINEQT_PLUGIN_PATH&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
Here is a list of all changes:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Return expected SO_RCVBUF and SO_SNDBUF values on Linux (Joint Operations Typhoon Rising, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=8606" target="_blank"&gt;Wine Bug #8606&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Don't set HWTRANSFORMANDLIGHT flag on d3d7 RGB device (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=2915" target="_blank"&gt;Summoner&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve detection of MPEG2 streams (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=1100" target="_blank"&gt;Wing Commander IV&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Correctly convert result of AVIStreamGetFrame to a segptr in avifile.dll16 (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=8603" target="_blank"&gt;The Journeyman Project 2&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Convert between AVISTREAMINFO (16 bit) and AVISTREAMINFOA in avifile.dll16 (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=8603" target="_blank"&gt;The Journeyman Project 2&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement proper refcounting and locking for HGLOBAL based IStream&lt;/li&gt;
	&lt;li&gt;Strip invalid characters from mask in FindFirstFileExW (Earth 2160, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=22635" target="_blank"&gt;Wine Bug #22635&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Translate 16 bit address in MCIWNDM_SETTIMEFORMATA MCIWndProc16 command (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=8603" target="_blank"&gt;The Journeyman Project 2&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not crash when INVALID_HANDLE_VALUE is passed to CloseThemeData (BitComet version &amp;lt; 1.37, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=29862" target="_blank"&gt;Wine Bug #29862&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Correctly handle compressed frames when desired format is specified (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=8603" target="_blank"&gt;The Journeyman Project 2&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not inherit QT_* environment variables to Windows environment (Various QT applications)&lt;/li&gt;
	&lt;li&gt;Revert patches to move mip-level dimensions fixup (multiple games, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=40094" target="_blank"&gt;Wine Bug #40094&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return additional properties for display devices in dxdiagn (Neverwinter Nights 2 / Galactic Civilization 2 / ..., &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34686" target="_blank"&gt;Wine Bug #34686&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow to pass NULL as old protection in VirtualProtect for Win9x compatibility (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=application&amp;iId=1100" target="_blank"&gt;Wing Commander IV&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add support for AVIFile interface proxies (Rush for Berlin Gold, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38564" target="_blank"&gt;Wine Bug #38564&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Blog: How do Win 3.1 applications work in Wine?</title><link href="/news/2016-02-10-blog-wine-16bit.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2016-02-10-blog-wine-16bit.html</id><updated>2016-02-10T00:00:00Z</updated><author><name>Michael Müller</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Blog: How do Win 3.1 applications work in Wine?&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Michael Müller&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 10 Feb 2016&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
If you read our release notes frequently, you might have noticed that I tend to explain the background behind the changes in Wine Staging as I imagine that this might be interesting for some of our readers. However, those explanations do not really belong into the release notes, so I decided to move them to separate blog posts. So welcome to my first blog post in which I explain how the 16 bit support works in Wine and which typical bugs you may encounter. I hope you enjoy reading it although it is going to be very technical, but maybe you learn something from it :-).
&lt;/p&gt;

&lt;p&gt;
Let's start with something that might surprise you: Although Wine supports 16 bit applications it basically doesn't contain any 16 bit code. Well, to be completely correct it does, but just a couple of lines of handwritten assembler code. The reason for this is simple, almost all code in Wine is written in C and intended to be compatible with different compilers. Almost no modern compiler is able to compile C code to 16 bit binary opcodes, and writing everything in assembler is also no option. Wine instead needs to use some special tricks which I will explain later. First we need to take a look at the biggest difference between 16 bit and 32 bit, the memory management.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
On a 32 bit system you have a 4GB memory range which can be accessed using memory addresses from 0x00000000 to 0xFFFFFFFF. Getting the next byte is as easy as incrementing the address. On 16 bit things were a bit more complicated though. The memory was not linear but instead split into segments. When you passed a pointer (for example a string or structure) to a windows API function, it was still a 32 bit address value but it was split into two parts:
&lt;/p&gt;


&lt;div style="text-align: center; font-size: 1.5em; margin-top: 1em; margin-bottom: 1em"&gt;
&lt;span style="display: inline-block; border: solid black 1px;"&gt;&lt;span style="display: inline-block; border-right: solid black 1px; width: 9ex; text-align: center;"&gt;Segment&lt;/span&gt;&lt;span style="display: inline-block; width: 9ex; text-align: center;"&gt;Offset&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
	&lt;span style="display: inline-block; width: 6ex; text-align: left;"&gt;32&lt;/span&gt;
	&lt;span style="display: inline-block; width: 6ex; text-align: center;"&gt;16&lt;/span&gt;
	&lt;span style="display: inline-block; width: 6ex; text-align: right;"&gt;0&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;
The lower 16 bit of the address contain an offset while the top 16 bit contain a segment index. Since the offset is 16 bit only, a segment has the maximum size of 64kb (2^16-1). When you try to access such an address, the CPU will translate the address to a linear address by using a translation table (Local Descriptor Table) which contains an entry for each segment index. An entry defines the start address for a segment and the size. Since our offset can't be bigger than 64 kb, the usual size of a segment is 64 kb. This brings us to the following relation &lt;code&gt;linear address = LDT[segment].base + offset&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
So how is Wine able to execute 16 bit code when using a 32 bit or 64 bit operating system? Well, I said that a 32 bit OS uses a linear memory, which is not 100% correct. The segmentation stuff also exists on 32 bit and in fact is mandatory. However, the size of the offset is now 32 bit and it is possible to put all available memory into a single segment. Basically all modern 32 bit operating systems just create one segment with start address 0 and size 4GB. Using this setup you get a linear memory and don't have to care about segments any more. The tricky part is that a LDT entry also contains flags which define if a segment contains 16 bit, 32 bit or 64 bit code. If you change to a segment, the CPU will automatically start interpreting the code inside the segment according to this value.
&lt;/p&gt;

&lt;div style="text-align: center; margin-top: 1.5em; margin-bottom: 1.5em;"&gt;
&lt;img src="/images/SegmentDescriptor.svg" style="max-height: 6em; max-width: 100%"&gt;&lt;br /&gt;
&lt;i&gt;Structure of a LDT entry when the processor is in 32 bit mode.&lt;/i&gt;&lt;br&gt;
&lt;i&gt;The &lt;code&gt;DB&lt;/code&gt; flag defines if this segment contains 32 bit code (1) or 16 bit code (0).&lt;/i&gt;&lt;br /&gt;
&lt;i style="font-size: 0.8em;"&gt;Source: &lt;a href="https://commons.wikimedia.org/wiki/File:SegmentDescriptor.svg" style="color: #3C3D3F;"&gt;Wikipedia&lt;/a&gt;&lt;/i&gt;
&lt;/div&gt;

&lt;p&gt;
So how does Wine use this trick? The Local Descriptor Table containing all those entries are process specific and many modern operating systems allow you to mess around with them. Linux for example provides the &lt;code&gt;modify_ldt&lt;/code&gt; function. When Wine starts a Win 3.1 16 bit application, it loads the executable into the memory and creates segments for it. Those segments are just 64 kb excerpts of our 32 bit memory, in fact we can now access the same memory either via a 16 bit or 32 bit address. The tricky part is when such an application tries to call an API function, since they are only available as 32 bit code. Wine generates 16 bit dlls but they only contain small wrappers to switch to our 32 bit segment and then calls the according 32 bit C function. The good thing is that Microsoft didn't change much in their API between 16 bit and 32 bit, so many functions are identical between 16 bit and 32 bit and it is sufficient to have one implementation. Well, at least in theory, there is still a nasty problem: The difference in the memory management.
&lt;/p&gt;

&lt;p&gt;
When a 16 bit application passes a pointer (for example a string or structure) to an API function, it will pass the pointer in the format (segment | offset). If we would just forward this value, for example (0x001E | 0x00F2), to a 32 bit function, the function would try to interpret this value as 32 bit address 0x001E00F2 instead of &lt;code&gt;LDT[0x001E].base + 0x00F2&lt;/code&gt;. Whenever Wine passes a pointer from a 16 bit application to a 32 bit API function, all these addresses must be translated first. Since Wine sets up the LDT table, it knows how to do this, it just needs to know when it is necessary. In order to solve this, each dll has a spec file with the exported functions:
&lt;/p&gt;

&lt;p&gt;
&lt;pre&gt;
144 pascal -ret16 CreateDirectory(ptr ptr) CreateDirectory16
145 pascal -ret16 RemoveDirectory(ptr) RemoveDirectory16
146 pascal -ret16 DeleteFile(ptr) DeleteFile16
147 pascal -ret16 SetLastError(long) SetLastError16
148 pascal GetLastError() GetLastError16
149 pascal -ret16 GetVersionEx(ptr) GetVersionEx16
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
These lines define the calling convention, the exported function including the parameter types, and which function in the source code should be called. If you write &lt;code&gt;ptr&lt;/code&gt; as parameter type Wine knows that this is a pointer and automatically generates code at build time to translate the addresses to 32 bit. So the problem is solved, right? Well, there are some indirect ways to pass memory addresses to the windows API which are not covered by this. The most common one are window messages, these are messages that are sent between windows and can contain up to 2 user defined values. Sometimes they also contain pointers, but Wine can't detect them automatically. So you need to write code to hook into the communication and translate the addresses before they arrive at the real destination:
&lt;/p&gt;

&lt;p&gt;
&lt;pre style='color:#000000;background:#ffffff;'&gt;&lt;span style='color:#800000; font-weight:bold; '&gt;static&lt;/span&gt; &lt;span style='color:#603000; '&gt;LRESULT&lt;/span&gt; &lt;span style='color:#603000; '&gt;WINAPI&lt;/span&gt; MCIWndProc16&lt;span style='color:#808030; '&gt;(&lt;/span&gt;&lt;span style='color:#603000; '&gt;HWND&lt;/span&gt; hwnd&lt;span style='color:#808030; '&gt;,&lt;/span&gt; &lt;span style='color:#603000; '&gt;UINT&lt;/span&gt; msg&lt;span style='color:#808030; '&gt;,&lt;/span&gt; &lt;span style='color:#603000; '&gt;WPARAM&lt;/span&gt; wparam&lt;span style='color:#808030; '&gt;,&lt;/span&gt; &lt;span style='color:#603000; '&gt;LPARAM&lt;/span&gt; lparam&lt;span style='color:#808030; '&gt;)&lt;/span&gt;
&lt;span style='color:#800080; '&gt;{&lt;/span&gt;
    &lt;span style='color:#800000; font-weight:bold; '&gt;switch&lt;/span&gt; &lt;span style='color:#808030; '&gt;(&lt;/span&gt;msg&lt;span style='color:#808030; '&gt;)&lt;/span&gt;
    &lt;span style='color:#800080; '&gt;{&lt;/span&gt;
    &lt;span style='color:#800000; font-weight:bold; '&gt;case &lt;/span&gt;&lt;span style='color:#7d0045; '&gt;MCIWNDM_SENDSTRINGA&lt;/span&gt;&lt;span style='color:#e34adc; '&gt;:&lt;/span&gt;
        lparam &lt;span style='color:#808030; '&gt;=&lt;/span&gt; &lt;span style='color:#808030; '&gt;(&lt;/span&gt;&lt;span style='color:#603000; '&gt;ULONG_PTR&lt;/span&gt;&lt;span style='color:#808030; '&gt;)&lt;/span&gt;MapSL&lt;span style='color:#808030; '&gt;(&lt;/span&gt;lparam&lt;span style='color:#808030; '&gt;)&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;
        &lt;span style='color:#800000; font-weight:bold; '&gt;break&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;

    &lt;span style='color:#800000; font-weight:bold; '&gt;case &lt;/span&gt;&lt;span style='color:#7d0045; '&gt;MCIWNDM_SETTIMEFORMATA&lt;/span&gt;&lt;span style='color:#e34adc; '&gt;:&lt;/span&gt;
        lparam &lt;span style='color:#808030; '&gt;=&lt;/span&gt; &lt;span style='color:#808030; '&gt;(&lt;/span&gt;&lt;span style='color:#603000; '&gt;ULONG_PTR&lt;/span&gt;&lt;span style='color:#808030; '&gt;)&lt;/span&gt;MapSL&lt;span style='color:#808030; '&gt;(&lt;/span&gt;lparam&lt;span style='color:#808030; '&gt;)&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;
        &lt;span style='color:#800000; font-weight:bold; '&gt;break&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;

&lt;span style='color:#e34adc; '&gt;&amp;#xa0;&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;/span&gt;&lt;span style='color:#800000; font-weight:bold; '&gt;default&lt;/span&gt;&lt;span style='color:#e34adc; '&gt;:&lt;/span&gt;
        &lt;span style='color:#800000; font-weight:bold; '&gt;break&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;
    &lt;span style='color:#800080; '&gt;}&lt;/span&gt;

    &lt;span style='color:#800000; font-weight:bold; '&gt;return&lt;/span&gt; CallWindowProcA&lt;span style='color:#808030; '&gt;(&lt;/span&gt;pMCIWndProc&lt;span style='color:#808030; '&gt;,&lt;/span&gt; hwnd&lt;span style='color:#808030; '&gt;,&lt;/span&gt; msg&lt;span style='color:#808030; '&gt;,&lt;/span&gt; wparam&lt;span style='color:#808030; '&gt;,&lt;/span&gt; lparam&lt;span style='color:#808030; '&gt;)&lt;/span&gt;&lt;span style='color:#800080; '&gt;;&lt;/span&gt;
&lt;span style='color:#800080; '&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
It is not important to understand how this function hooks into the communication (window subclassing, not shown here), but this function hooks the communication between a 16 bit MCI and 32 bit MCI window. Depending on the type of message (for example &lt;code&gt;MCIWNDM_SENDSTRINGA&lt;/code&gt;) lparam sometimes contains pointers which need to be translated before sending the message to the original destination. The function to translate these memory addresses is MapSL. You can see how lparam is replaced before forwarding it using &lt;code&gt;CallWindowProcA&lt;/code&gt;. So one typical reason why a 16 bit application crashes on Wine is that nobody added the necessary translation code yet. Another problem is that structure definition sometimes slightly differ between 32 bit and 16 bit and it is not sufficient to translate just the address. In Wine Staging 1.9.3 for example we fixed three very similar issues, caused by incorrect translation of addresses from 16-bit to 32-bit and vice versa.
&lt;/p&gt;

&lt;p&gt;
So, I hope I could give you an overview on how 16 bit works in Wine and what issues you might encounter. This surely doesn't cover all details, but should explain the idea. If you think this is very complex and nobody uses something like this in more recent software, then I have to disappoint you. In fact Windows uses a similar approach to support 32 bit applications on 64 bit Windows versions. If you start a 32 bit application on such an OS, the kernel will create a 64 bit process with a 64 bit ntdll + 32 bit ntdll. Whenever your process calls the 32 bit ntdll, Windows switches from a 32 bit segment to a 64 bit segment and calls the same function in the 64 bit ntdll. The only difference is that the address translation is much easier - just fill up the top 32 bit with zeros and you are done, so no need to translate segmented addresses back and forth.
&lt;p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.8</title><link href="/news/2015-12-22-release-1.8.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-12-22-release-1.8.html</id><updated>2015-12-22T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.8&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 22 Dec 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Yesterday we released Wine Staging 1.8, which is kind of special as it is based on a stable release instead of a development release. Although Wine Staging was not really affected by the development code freeze, we still kept the changes small during this time, so you could consider this to be a stable staging release.
&lt;/p&gt;

&lt;p&gt;
Anyway, Christmas is very close, so we still prepared a small present in form of a new feature for this Wine Staging release. We spent some time on implementing Windows Update in Wine. To be exact we worked on the &lt;b&gt;W&lt;/b&gt;indows &lt;b&gt;U&lt;/b&gt;pdate &lt;b&gt;S&lt;/b&gt;tand-&lt;b&gt;A&lt;/b&gt;lone Installer (WUSA). This program (wusa.exe) can be used to install Windows Updates packages on Vista and above. Sounds weird to implement something like this in Wine? Well, Microsoft didn't only decide to use this for real Windows updates but also for other software which either replaces system components or is closely tied to Windows. Prominent examples for this are .NET Framework 4.5 or the Internet Explorer. Those updates are often embedded into some executable, but you can also download some Microsoft Updates (.msu) files directly.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Those updates contain a complex system of xml files which define subpackages, installation instructions, dependencies, and so on. The whole concept is very similar to how most linux package managers work. Our current implementation can successfully install x86 packages in a plain 32 bit and WOW64 prefix as well as x64 packages in a WOW64 bit prefix. There are some shortcuts and the current implementation does not work with all MSU packages yet. The main reason for this are packages using the proprietary msdelta compression which is not yet supported in Wine, so the installation will fail as wusa fails to find some files (this affects for example the IE .msu package).
&lt;/p&gt;

&lt;p&gt;
Nevertheless, the current implementation can already be used to install .NET Framework 4.5. Just create a 32 bit prefix (x64 / WOW64 bit .NET Framework does not work properly due to other problems), change the Windows version to Vista or 7 and set mscoree to native in the library tab. Setting mscoree to native is a workaround for a different wine bug. The problem is already known, but fixing it would have had the potential of introducing regressions, so this is something we are planning for the 1.9.0 release. Now you should be able to run the normal .NET 4.5 installer and get a working installation. You can also use the &lt;a href="http://blogs.msdn.com/b/astebner/archive/2008/10/13/8999004.aspx"&gt;.NET verifier&lt;/a&gt; to check if the installation is correct. Please note that the installation would also succeed on vanilla Wine 1.8, but it would be broken because the .msu installation was simply skipped.
&lt;/p&gt;

&lt;p&gt;
I hope you like your present of getting a clean .NET 4.5 installation without using winetricks and installing a bunch of older .NET versions. We will try to improve the wusa implementation till the 1.9.0 release next year. In the meantime we wish you a merry Christmas and happy new year. Enjoy your holidays and play some games using Wine (Staging) or whatever you have planned ;-).
&lt;/p&gt;

&lt;center&gt;&lt;img style="width: 50%;" src="/images/santa.svg"&gt;&lt;/center&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Packaging changes</title><link href="/news/2015-12-11-packaging-changes.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-12-11-packaging-changes.html</id><updated>2015-12-11T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Packaging changes&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Fri, 11 Dec 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
In the past the bi-weekly release cycle of Wine causes a lot of work for developers and packagers. Not all distros can afford to update a single package every two weeks. As a result, they often only provide packages for the stable branch or ship an outdated version of the development branch. To solve this problem, there was the decision at WineConf 2015 that WineHQ should provide packages for popular distributions. Since we already build packages for Wine Staging, we offered to extend our current system to include the development branch. As part of this process we decided to drop our dependency on external build services (except Launchpad) and instead build everything in our own VMs. We also extended our build scripts to provide a more general way of building packages which is less tied to Wine Staging or Wine in general. These changes do not only affect the newly built Wine development packages but also our existing Wine Staging packages. The changes differ between distros and are described below.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;hr style="border: 0; border-bottom: 1px dashed #ccc;"&gt;

&lt;p&gt;
&lt;b&gt;Debian:&lt;/b&gt; The wine-compat package, which adds symlinks in /usr/bin to configure Wine Staging as your default wine version, was renamed to winehq-staging. A dummy package is provided to keep backwards compatibility during an upgrade. If you are still using Wheezy, the location of the repository has changed. The Wheezy packages are no longer build on the OpenSUSE build servers, but instead we build the packages on our own build system, like we do for all other debian versions. Take a look at our &lt;a href="https://github.com/wine-compholio/wine-staging/wiki" target="_blank"&gt;Installation instructions&lt;/a&gt; for information how to use the new repository.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;OpenSUSE:&lt;/b&gt; We decided to move all builds to our own build system since the OpenSUSE build servers only support stable versions for other distributions. Building packages for the same distribution on different services only make things more complicated. For OpenSUSE the story is a bit different though since the OBS is optimized for this distribution, so it wouldn't be a wise idea to use something different. However, since this would have been the last distro for which we are using the OBS, we asked &lt;a href="http://wiki.winehq.org/MarcusMeissner"&gt;Marcus Meissner&lt;/a&gt; to take care of the packages. He already provides bi-weekly updates for the wine development package. The new Wine Staging packares are published in the &lt;code&gt;Emulators:Wine/wine-staging&lt;/code&gt; repository, so you will need to change to this new repoistory. More information can be found in the &lt;a href="https://github.com/wine-compholio/wine-staging/wiki" target="_blank"&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Fedora:&lt;/b&gt; Our fedora packages changed a lot. While moving the files from OBS to our own builder, we also completely rewrote the spec file. We do not longer split Wine into different subpackages as the default wine package on Fedora does. Most users install the full Wine package anyway and leaving out some packages can easily break applications. Instead we provide now a single wine-staging package which install all files to &lt;code&gt;/opt/wine-staging&lt;/code&gt; (or to be more precise, we only uses the minimum number of packages required to get a working WOW64 build). If you would like to install wine-staging as your default Wine version, you can install the winehq-staging package. Please not that this is basically identical to using the default wine package in Fedora. Don't forget to update the repository url as described in the &lt;a href="https://github.com/wine-compholio/wine-staging/wiki" target="_blank"&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Mageia:&lt;/b&gt; For Mageia users there weren't any big changes. You can now install the winehq-staging package to configure Wine Staging as your default Wine version, but otherwise everything stays the same :-).
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;CentOS:&lt;/b&gt; The support for CentOS has been dropped, we do not longer provide packages for this distribution. CentOS 6 often provides packages that are too outdated to support all features of Wine Staging and CentOS 7 didn't support i386 for a long time. We therefore concentrate our work on other packages first, but we might consider adding support for CentOS 7 at a later point.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;Arch Linux:&lt;/b&gt; In the meantime Arch Linux provides Wine Staging in the default repositories and it is therefore not necessary for us to provide packages any more. We provided a package called wine-staging-opt for some time which installed into /opt/wine-staging and didn't replace the default wine version unlike the distro provided package. However, we consider dropping this package as the number of users is quite low.
&lt;/p&gt;

&lt;hr style="border: 0; border-bottom: 1px dashed #ccc;"&gt;


&lt;p&gt;
This should cover the most important changes. We are still not completely done yet, but most remaining changes will only affect our internal build system and shouldn't be visible to our users. In case you are wondering why there are no release notes for the 1.8rc-* versions, we simply decided that there are not enough big changes during one week that it would make sense to write news about it. You can still find all added and removed patches in our changelog.
&lt;/p&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.54</title><link href="/news/2015-11-01-release-1.7.54.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-11-01-release-1.7.54.html</id><updated>2015-11-01T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.54&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 01 Nov 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Yesterday we released Wine Staging 1.7.54. The release contains fixes for the widl compiler, the handling of APCs and various additional improvements for other parts of wine.
&lt;/p&gt;

&lt;p&gt;
In this releases we added multiple improvements and bug fixes for the wine IDL (widl) compiler. The widl compiler reads files in the Microsoft Interface Definition Language (MIDL) and converts them into different output formats. One possible output format are typelibs. Those files contain a binary definition of the interfaces described in the input file and are often used by scripting languages in order to communicate with COM objects. So far the widl compiler contained various bugs and the typelibs shipped with Wine were not completely correct, causing scripts to fail. Some of those problems have been fixed.
&lt;/p&gt;

&lt;p&gt;
One concept of the windows API which might be even unknown to some programmers, are Asynchronous Procedure Calls (APCs). They provide a way to pause a thread, execute a function and resume the execution. Those APCs can either be initiated from some other thread/process (user APCs) or from the windows kernel. Although Wine does not have a kernel, the idea of kernel APCs is still used, for example if you try to allocate memory in a different process. The POSIX API does not provide such a feature, so Wine needs a way to execute the memory allocation in the target process. To accomplish this, Wine can use two different ways to notify a thread about a kernel APC. This lead to a race condition in which one kernel APC could be interrupted by a different kernel APC. Although this does not lead to a crash, processing them in a wrong order can cause deadlocks. This problem has been fixed in Wine Staging 1.7.54.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Besides various patches accepted upstream, here is a list of all new feature and fixes added since the last release:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add stub for SetCoalescableTimer (OneDrive for Business, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39509"&gt;Wine Bug #39509&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for SetConsoleKeyShortcuts (FarManager v3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35702"&gt;Wine Bug #35702&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for SfcGetNextProtectedFile (FreshDiagnose, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38097"&gt;Wine Bug #38097&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not allow interruption of system APC in server_select (OllyDbg 2, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=14697"&gt;Wine Bug #14697&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix multiple issues in widl typelib generation&lt;/li&gt;
	&lt;li&gt;IEnumSTATSTG::Next should zero out returned stats when enumeration ends&lt;/li&gt;
	&lt;li&gt;Implement FileNamesInformation class support for NtQueryDirectoryFile&lt;/li&gt;
	&lt;li&gt;Implement SystemHandleInformation info class (ProtectDISC 6)&lt;/li&gt;
	&lt;li&gt;Implement hal.KeQueryPerformanceCounter (Secret Files: Tunguska, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39500"&gt;Wine Bug #39500&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement kernel32.GetConsoleFontSize&lt;/li&gt;
	&lt;li&gt;Implement stub for ProcessQuotaLimits info class (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=570"&gt;Wine Staging Bug #570&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve INetFwAuthorizedApplication::get_ProcessImageFileName stub (VoipBuster)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All the changes (including removed/upstream accepted patches) are listed in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.54/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.53</title><link href="/news/2015-10-21-release-1.7.53.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-10-21-release-1.7.53.html</id><updated>2015-10-21T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.53&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 21 Oct 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
On Sunday we released Wine Staging 1.7.53, this time with a few less changes than usual. We were mainly focusing on upstreaming various features, and got 33 patches upstream since the last release. Nevertheless, there are still some interesting changes in this release.
&lt;/p&gt;

&lt;p&gt;
If you were using Steam lately, you might have noticed that the store and community tab doesn't show any content. The problem is caused by the embedded chromium code used by Steam. Chromium contains a sandbox to increase the security, but unlike on Linux, the Windows sandbox does not rely on any kernel features but instead modifies functions in ntdll.dll. So far this didn't cause any problem as Steam didn't make use of this sandbox, which changed in a recent update. The problem is that on Windows, ntdll mostly contains wrappers to the corresponding syscalls, while Wine implements all the kernel logic directly in ntdll. The code simply does not match what Chromium is expecting. This release contains an experimental patch to fix this issue for a pure 32 bit prefix (not for a WOW64 prefix!). Make sure to create a prefix with &lt;code&gt;WINEARCH=win32&lt;/code&gt; if you need this feature. Please also note that the patch is only enabled for Linux so far, since additional changes to the build system are required to make it Mac OS X compatible. This will be fixed very soon.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Besides the fix for Steam, there were also some other small new feature and fixes:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add implementation for comctl32.PROPSHEET_InsertPage (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=25625"&gt;Wine Bug #25625&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Always use 64-bit registry view on WOW64 setups&lt;/li&gt;
	&lt;li&gt;Do not check if object was signaled after user APC in server_select&lt;/li&gt;
	&lt;li&gt;Do not signal threads until they are really gone (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=473"&gt;Wine Staging Bug #473&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix the initialization of combined DACLs when the new DACL is empty (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38423"&gt;Wine Bug #38423&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement kernel32.GetPhysicallyInstalledSystemMemory (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39395"&gt;Wine Bug #39395&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return WN_NOT_CONNECTED from WNetGetUniversalName REMOTE_NAME_INFO_LEVEL stub (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39452"&gt;Wine Bug #39452&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Show windows version when collecting system info in winedbg&lt;/li&gt;
	&lt;li&gt;Use wrapper functions for syscalls to appease Chromium sandbox (32-bit Linux only) (Chromium and Steam, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39403"&gt;Wine Bug #39403&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All the changes (including removed/upstream accepted patches) are listed in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.53/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
PS: Sorry for the unusual high delay between the actual release and the release notes, I (Michael) was really busy during the last days.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.52</title><link href="/news/2015-10-04-release-1.7.52.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-10-04-release-1.7.52.html</id><updated>2015-10-04T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.52&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 04 Oct 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Some minutes ago we released Wine Staging 1.7.52. This is the first release after WineConf 2015 and the &lt;a href="2015-09-25-winehq-integration.html"&gt;integration into WineHQ&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Some of the changes related to the integration have been realized in the meantime and you should now use the &lt;a href="https://bugs.winehq.org/"&gt;WineHQ bug tracker&lt;/a&gt; for reporting bugs. Just open them as regular Wine bugs and mention the used wine version. Although this news is mostly about the source code changes, I would like to mention that Arch Linux now provides an &lt;a href="https://www.archlinux.org/packages/multilib/x86_64/wine-staging/"&gt;official package&lt;/a&gt; which is also named &lt;code&gt;wine-staging&lt;/code&gt; and therefore conflicts with our packages. The package installs into &lt;code&gt;/usr&lt;/code&gt; instead of &lt;code&gt;/opt/wine-staging&lt;/code&gt; so you might run into conflicts with other wine versions. Take a look at our &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation#-arch-linux"&gt;Wiki&lt;/a&gt; for more information.
&lt;/p&gt;


&lt;!--PREVIEW--&gt;

&lt;p&gt;
In this release an implementation of the &lt;a href="https://msdn.microsoft.com/en-us/library/aa370083(v=vs.85).aspx"&gt;msidb&lt;/a&gt; tool has been added. The program can be used to create or alter MSI installers. As usual there were also several bug fixes which are listed below.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add implementation for mfplat.MFTEnum (Prism Video Converter, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39309"&gt;Wine Bug #39309&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add implementation for msidb commandline tool&lt;/li&gt;
	&lt;li&gt;BitBlt and StretchDIBits should be marked as hotpatchable (Bad Mojo - GOG)&lt;/li&gt;
	&lt;li&gt;Codepage conversion should fail when destination length is &amp;le; 0&lt;/li&gt;
	&lt;li&gt;Correctly parse double quotes in the msi token values&lt;/li&gt;
	&lt;li&gt;Do not trust width/height passed to edit control in WM_SIZE message (Lotus Approach, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=37542"&gt;Wine Bug #37542&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not use GdipAlloc and GdipFree in internal functions (Happy Foto Designer, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=32786"&gt;Wine Bug #32786&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not wait for hook thread startup in IDirectInput8::Initialize (Shiva Editor/Evochron, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21403"&gt;Wine Bug #21403&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix calculation of listbox size when horizontal scrollbar is present (Lotus Approach, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38142"&gt;Wine Bug #38142&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement additional stub functions in authz.dll (Cygwin 2.3.0, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=565"&gt;Wine Staging Bug #565&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement ws2_32.InetPtonA/W functions (Cinema 4D R17)&lt;/li&gt;
	&lt;li&gt;Mark ddraw1 and ddraw_surface1 vtable as writable (Bad Mojo - GOG)&lt;/li&gt;
	&lt;li&gt;Pass cookie by reference to msvcrt_local_unwind4 in _seh_longjmp_unwind4 (PlanCad-L, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39356"&gt;Wine Bug #39356&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Protect TVM_GETITEM from invalid item pointers (AXE3, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=33001"&gt;Wine Bug #33001&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Refresh MDI menus when DefMDIChildProc(WM_SETTEXT) is called (Lotus Word Pro, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21855"&gt;Wine Bug #21855&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;RegOpenKeyExA, RegCloseKey and RegQueryValueExA should be hotpatchable (Bad Mojo - GOG)&lt;/li&gt;
	&lt;li&gt;Return STATUS_INVALID_DEVICE_REQUEST when trying to call NtReadFile on directory (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=571"&gt;Wine Staging Bug #571&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;WritePrivateProfileStringA should be hotpatchable (Bad Mojo - GOG)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
All the changes (including removed/upstream accepted patches) are listed in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.52/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Integration into WineHQ</title><link href="/news/2015-09-25-winehq-integration.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-09-25-winehq-integration.html</id><updated>2015-09-25T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Integration into WineHQ&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Fri, 25 Sep 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging has already existed about a year and, although used by many people, until recently there was no final decision about its relation to WineHQ. Many people saw Wine Staging as a fork and, as a result, users were asked not to use the upstream bug tracker or AppDB, which pressured us to setup our own infrastructure.
&lt;/p&gt;

&lt;p&gt;
Based on the decisions made during the Wine developer conference (WineConf 2015) last weekend, this situation is going to change. Wine Staging is now an official part of WineHQ, like the development and stable versions of Wine. The integration will cause changes on both sides and I would like to give a short overview here. For those interested in more details, I also recommend reading Alexandre Julliard’s &lt;a href="https://www.winehq.org/pipermail/wine-devel/2015-September/109392.html"&gt;summary&lt;/a&gt; on the wine-devel mailing list.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;p&gt;
	The Wine Staging bug tracker is going to be retired. Most of the bugs in Wine Staging also appear with regular Wine and it therefore doesn't make sense to track them twice. As soon as the bug tracker changes have been integrated, all future bug reports should be filed in the upstream bug tracker as regular Wine bugs. For bugs specific to Wine Staging there will be a separate Staging product. Bugs that appear in the development version of Wine, but not in Wine Staging, will have the status &lt;code&gt;STAGED&lt;/code&gt;.
	&lt;/p&gt;
	&lt;/li&gt;

	&lt;li&gt;
	&lt;p&gt;
	The idea is also to integrate Wine Staging more into the regular development process, by adding a new patch status "Staging" on the patch submission website. This status basically means that your patch is not ready or too risky to be added to the development version of Wine. Try to get it into Wine Staging first.
	&lt;/p&gt;
	&lt;/li&gt;

	&lt;li&gt;
	&lt;p&gt;
	All new patch submissions should have a &lt;code&gt;Signed-Off-By&lt;/code&gt; header. Although it does not seem to be directly related to Staging, it helps us a lot. We often have multiple developers working on big features and a patch is currently limited to have one author. This makes cooperation more difficult than necessary. The new &lt;code&gt;Signed-Off-By&lt;/code&gt; header allows us to list multiple authors and should hopefully increase the development speed.
	&lt;/p&gt;
	&lt;/li&gt;

	&lt;li&gt;
	&lt;p&gt;
	WineHQ is going to provide binary packages for the development version of Wine. Some distributions do not provide packages for the development version which makes it harder for users to test if a specific bug has already been fixed. We will help upstream Wine by providing our build scripts and infrastructure to build packages.
	&lt;/p&gt;
	&lt;/li&gt;

	&lt;li&gt;
	&lt;p&gt;
	From a developer perspective not much will change in Wine Staging, the maintainers will stay the same for the foreseeable future. The patch submission process will be altered since the bug tracker is going to be retired, but there hasn't been a final decision yet on how this will be handled. We might either get our own mailing list at WineHQ or maybe add a special component to the Staging product in the upstream bug tracker. For now please continue using our existing bug tracker until more details are available.
	&lt;/p&gt;
	&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;
Not all of those changes have been realized yet, so please stay patient. We hope that everyone can benefit from these changes in the long term.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.51</title><link href="/news/2015-09-08-release-1.7.51.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-09-08-release-1.7.51.html</id><updated>2015-09-08T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.51&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Tue, 08 Sep 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Yesterday we released Wine Staging 1.7.51 with a bunch of bug fixes. We continued our work on MSYS2 and also added patches for various other applications.
&lt;/p&gt;

&lt;p&gt;
For those who use the CSMT (commandstream multithreading) patchset to improve the graphic performance, it might be worth to retest existing bug reports. Several bugs were fixed in this release, and the patchset has been updated to stay in sync with the authors repository.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
The full list of added features and bug fixes is shown below.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add IHTMLLocation::hash property's getter implementation (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=32967"&gt;Wine Bug #32967&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for dwmapi.DwmUpdateThumbnailProperties&lt;/li&gt;
	&lt;li&gt;Add stub for winspool.SetPrinterW level 8 (PDF Factory, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24645"&gt;Wine Bug #24645&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow non-nullterminated string as working directory in kernel32.create_startup_info (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=543"&gt;Wine Staging Bug #543&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Create Microsoft\Windows\Themes directory during Wineprefix creation (WinLaunch 0.4, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34910"&gt;Wine Bug #34910&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fallback to default comspec when %COMSPEC% is not set (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=449"&gt;Wine Staging Bug #449&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix access violation in MSYS2 git when cloning repository (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=348"&gt;Wine Staging Bug #348&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix error handling in DeferWindowPos when passing an invalid HWND (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=23187"&gt;Wine Bug #23187&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix failure to create anonymous file mapping after failed open_fd server call (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=538"&gt;Wine Staging Bug #538&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement FolderImpl_Items and stubbed FolderItems interface (Gray Matter GOG Installer)&lt;/li&gt;
	&lt;li&gt;Implement a Times New Roman replacement font (Programs using Awesomium, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=32342"&gt;Wine Bug #32342&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement {Set,Get}ThreadGroupAffinity and related ntdll functions (Trion's Trove, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=36549"&gt;Wine Bug #36549&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Map EXDEV error code to STATUS_NOT_SAME_DEVICE (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=536"&gt;Wine Staging Bug #536&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly close sockets when WSACleanup is called (QIP Infium, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=18670"&gt;Wine Bug #18670&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly initialize caps-&gt;dwZBufferBitDepths in ddraw7_GetCaps (Shadow Company, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=27002"&gt;Wine Bug #27002&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly render themed buttons when they are pressed (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=37584"&gt;Wine Bug #37584&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return a dummy BIOS name in Win32_BIOS record (NinjaTrader, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=528"&gt;Wine Staging Bug #528&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;SHFileOperation with FO_MOVE should create new directory on Vista+ (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=25207"&gt;Wine Bug #25207&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Translate flags in LaunchINFSectionW (Windows Media Player 6 Installer)&lt;/li&gt;
	&lt;li&gt;Update the Courier New replacement font (FEAR/AoE3/..., &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=20456"&gt;Wine Bug #20456&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use proper glyph names in wineps driver to allow copying text from generated PDF files (OrCAD, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=6416"&gt;Wine Bug #6416&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As usual you can find all the changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.51/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.50</title><link href="/news/2015-08-23-release-1.7.50.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-08-23-release-1.7.50.html</id><updated>2015-08-23T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.50&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 23 Aug 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Yesterday we released Wine Staging 1.7.50, which improves support for MSYS2 and fixes some bugs in the recently added GTK3 theming engine.
&lt;/p&gt;

&lt;p&gt;
This release continues the ongoing effort to fix MSYS2 related bugs in order to provide a Win32 build environment through Wine. This should make it easier to develop and test applications without using Windows. Since many MSYS2 tools are based on Cygwin (a POSIX implementation for Windows), they require a lot of low level APIs and often reveal shortcomings in Wine. In the long term, fixing those bugs might also help other applications.
&lt;/p&gt;

&lt;p&gt;
Besides that, we continued to work on the recently added GTK3 theming engine. Most importantly, various users reported an issue which caused a &lt;code&gt;division by zero&lt;/code&gt; exception, which should be fixed in this release.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
The full list of added features and bug fixes (including those for MSYS2) is shown below.
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add IDragSourceHelper stub interface (Explorer++, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24699"&gt;Wine Bug #24699&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Catch invalid memory accesses in imagehlp.CheckSumMappedFile (Opticut, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=502"&gt;Wine Staging Bug #502&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not allow to deallocate thread stack for current thread (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=241"&gt;Wine Staging Bug #241&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix detection of case-insensitive systems in MSYS2 (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=474"&gt;Wine Staging Bug #474&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix implementation of msvcrt.close when stdout == stderr (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=485"&gt;Wine Staging Bug #485&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement enumeration of sound devices and basic properties to dxdiagn (Rainbow Six: Lockdown, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=32613"&gt;Wine Bug #32613&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement shell32 NewMenu class with new folder item (Explorer++ et al., &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24812"&gt;Wine Bug #24812&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement special handling for calling GetChildContainer with an empty string (CCCP Insurgent, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38014"&gt;Wine Bug #38014&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Improve startup performance by delaying font initialization (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=401"&gt;Wine Staging Bug #401&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Notepad should create new files immediately (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=19425"&gt;Wine Bug #19425&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Only set SFGAO_HASSUBFOLDER when there are really subfolders (Explorer++ et al., &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=24851"&gt;Wine Bug #24851&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly implement imagehlp.ImageLoad and ImageUnload (Opticut, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=502"&gt;Wine Staging Bug #502&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Report correct ObjectName for NamedPipe wineserver objects (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=363"&gt;Wine Staging Bug #363&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return STATUS_OBJECT_NAME_INVALID in wine_nt_to_unix_file_name for paths that only contain a prefix (Filterforge, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39133"&gt;Wine Bug #39133&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return a valid mesh in D3DXCreateTeapot (Drakensang: The Dark Eye, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=36884"&gt;Wine Bug #36884&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Set EOF on file which has a memory mapping should fail (MSYS2, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=471"&gt;Wine Bug #471&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use helper function for NtWaitForMultipleObjects and NtWaitForSingleObject (Stylizer 5, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39127"&gt;Wine Bug #39127&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Since the last Wine Staging release about 27 patches were accepted in upstream Wine. As usual you can find all the changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.50/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.49</title><link href="/news/2015-08-09-release-1.7.49.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-08-09-release-1.7.49.html</id><updated>2015-08-09T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.49&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 09 Aug 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
We are happy to announce Wine Staging 1.7.49. Although we didn't have as much time as usual due to the delayed release last time (and various other projects we are working on in the background, so stay tuned!), we have some neat features for you in this release. Especially for people who blame Wine for looking like it's still 1995.
&lt;/p&gt;

&lt;p&gt;
Starting with Windows XP Microsoft added theming support and changed it again in every Windows version since. The support for loading such themes was also added in Wine a long time ago, but due to changes in later Windows version Wine can only load Themes targeting Windows XP. Most users probably never noticed this feature as Wine doesn't ship any default themes. Needless to say that Wine looks like an alien on modern Linux desktops when using the default XP Luna theme.
&lt;/p&gt;

&lt;p&gt;
Instead of improving the existing theming implementation, the patchset added in this release adds a full alternative implementation to integrate Wine better into your Linux desktop. The feature written by Ivan Akulinchev utilizes GTK3 for rendering and makes Wine look like an ordinary GTK3 application. Since this feature is very experimental and not everyone might prefer the new look (or the possibly higher CPU usage), you need to manually enable it through the Staging tab of &lt;code&gt;winecfg&lt;/code&gt;. Here are two screenshots to give you an impression on what you can do this way:
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;div style="text-align: center; margin-top:1em; margin-bottom: 1em;"&gt;
	&lt;span style="display: inline-block; height: 100%; vertical-align: middle;"&gt;&lt;/span&gt;
	&lt;img src="/images/gtk3_winecfg.png" style="vertical-align: middle; margin: 2ex;"&gt;
	&lt;img src="/images/gtk3_file.png" style="vertical-align: middle; margin: 2ex;"&gt;
&lt;/div&gt;


&lt;p&gt;
There are still some bugs left and not all themes work properly, so feel free to open a &lt;a href="https://bugs.wine-staging.com/"&gt;bug report&lt;/a&gt; for any issues you encounter. Please also note that not all our prebuilt packages will be built using this feature due to multiarch conflicts, sorry.
&lt;/p&gt;

&lt;p&gt;
Besides this new big feature, we also got about 28 patches upstream since the last release, and added the following bug fixes and additions:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add stub dlls required for MSVC 2015 / Windows 10 runtime library&lt;/li&gt;
&lt;li&gt;Add stubs for additional wininet options in InternetSetOption (LogMeIn Ignition, &lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=443"&gt;Wine Staging Bug #443&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fake success in IViewObject::Draw stub (Lazarus browser, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30611"&gt;Wine Bug #30611&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix possible integer overflow in VarR4FromDec (.NET, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38988"&gt;Wine Bug #38988&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Implement stub for vcomp._vcomp_flush (Schein, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39058"&gt;Wine Bug #39058&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Improve stubs for dxgi MakeWindowAssociation and GetWindowAssociation&lt;/li&gt;
&lt;li&gt;Move cookie initialization code from memory management to loader (Office 2010, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=39040"&gt;Wine Bug #39040&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Winhttp raw request headers must be terminated using double \r\n (Final Fantasy XIV, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35953"&gt;Wine Bug #35953&lt;/a&gt;)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;
As usual you can find all the changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.49/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.48</title><link href="/news/2015-07-29-release-1.7.48.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-07-29-release-1.7.48.html</id><updated>2015-07-29T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.48&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Wed, 29 Jul 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
In contrast to our usual release schedule, we released Wine Staging 1.7.48 this time on Wednesday. This is just a result of the deferred upstream release and doesn't mean that we are going to change our release date in the future. The following list shows the features and bug fixes added in this release:
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;ul&gt;
	&lt;li&gt;Add stub for D3DXTessellateNPatches&lt;/li&gt;
	&lt;li&gt;Add stubs for D3DCompile2 and D3DCompileFromFile&lt;/li&gt;
	&lt;li&gt;Add stubs for d3dx10_43.D3DX10CreateEffectFromFileA/W (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=27739"&gt;Wine Bug #27739&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add support for ThreadQuerySetWin32StartAddress info class (Process Explorer, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=8277"&gt;Wine Bug #8277&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add wined3d detection for GeForce GT 425M (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35054"&gt;Wine Bug #35054&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Avoid race-conditions with long running threadpool tasks (Fixes website loading in Steam)&lt;/li&gt;
	&lt;li&gt;Check architecture before loading a dll (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38021"&gt;Wine Bug #38021&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Export additional OpenAL32 functions (Titan Souls, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38972"&gt;Wine Bug #38972&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fake success in kernel32.SetFileCompletionNotificationModes (Steam in Windows 7 mode, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38960"&gt;Wine Bug #38960&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix loading of libraries with incomplete IMAGE_LOAD_CONFIG_DIRECTORY struct&lt;/li&gt;
	&lt;li&gt;Fix security cookie handling for UPX compressed executables (Free Falcon, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38949"&gt;Wine Bug #38949&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Forward exitcode from child process when in wineconsole (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=422"&gt;Wine Staging Bug #422&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement AMStream GetMultiMediaStream functions (Medieval Total War, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=37090"&gt;Wine Bug #37090&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement dbghelp.UnDecorateSymbolNameW (Cerbero PE Insider, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38828"&gt;Wine Bug #38828&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return dummy ID3DXSkinInfo interface when skinning info not present (Face Noir, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=33904"&gt;Wine Bug #33904&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Share source of d3dx9_36 with d3dx9_33 to avoid Wine DLL forwards (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21817"&gt;Wine Bug #21817&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Silence repeated LocaleNameToLCID/LCIDToLocaleName unsupported flags FIXMEs (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30076"&gt;Wine Bug #30076&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Store registry timestamps with nanoseconds precision (IVONA Voices trial, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38927"&gt;Wine Bug #38927&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use video memory for rendering targets if possible (Zoo Tycoon / Conquest Frontier Wars, &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34906"&gt;Wine Bug #34906&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
A regression affecting various applications when CSMT is enabled should also be fixed now. Besides the newly added features we also got about 30 patches upstream since the last release.
&lt;/p&gt;

&lt;p&gt;
As usual you can find all the changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.48/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.47</title><link href="/news/2015-07-12-release-1.7.47.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-07-12-release-1.7.47.html</id><updated>2015-07-12T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.47&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 12 Jul 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
In the past two weeks we worked on multi-threaded VCOMP support, added better GPU detection when using the MESA driver and improved our Mac OS X builds.
&lt;/p&gt;

&lt;p&gt;
The main feature of this new release is the improved vcomp.dll support. The Visual C++ compiler uses this dll to create and manage threads when using OpenMP. Unlike the name might suggest, the internal details of the Microsoft implementation are undocumented. Before this release Wine Staging already contained the single-threaded fallback implementation by Dan Kegel, which was replaced with a new implementation including proper multi-threading support. For many applications that depend on OpenMP support through vcomp.dll it is no longer necessary to install native libraries. Various additional functions are planned to be implemented until the next release.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Applications and game engines often use the information returned by Direct3D to optimize the rendering for a specific graphic card. This information includes the available amount of memory and the PCI vendor / device. Since these values are not available through OpenGL, Wine tries to match the OpenGL renderer string against a table with predefined values. This is not always very precise since some drivers only return the chipset series and the available amount of memory can differ between different graphic cards of the same type. In this release we added support for the &lt;code&gt;GLX_MESA_query_renderer&lt;/code&gt; extension which is available on Mesa 10. This extension provides precise information about the memory / PCI ids and should therefore improve the detection.
&lt;/p&gt;

&lt;p&gt;
Besides adding new features, we also reached a new peak value in upstreaming patches. In total 54 patches got upstream in this release. As usual you can find all the changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.47/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
In the last release we added Mac OS X builds and we now improved them by adding support for hotpatchable functions. This features is used by Steam to provide in-game overlay support. While Steam simply detects that the support is missing, some other applications crash when trying to hook API functions. So far only GCC supported the necessary &lt;code&gt;ms_hook_prologue&lt;/code&gt; attribute, but we patched llvm to implement the same feature. The build for Wine Staging 1.7.46 is therefore no longer affected by this bug. You can use our &lt;code&gt;winecheck&lt;/code&gt; utility to check this feature, it will also show the detected Direct3D GPU values. You can find more information about the utility in our &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Winecheck"&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.46</title><link href="/news/2015-06-28-release-1.7.46.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-06-28-release-1.7.46.html</id><updated>2015-06-28T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.46&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 28 Jun 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
In the past two weeks we improved the Mac OS X compatibility and worked on upstreaming patches.
&lt;/p&gt;

&lt;p&gt;
Most of the Wine Staging developers and contributors use Wine on Linux based systems. This leads to the problem that some features are not directly available or might contain bugs on other unix based systems. This release however focuses mostly on Mac OS X. We fixed several smaller bugs and issues regarding cross compiling and the loading of libraries. Besides code fixes, we now also provide prebuilt packages for Mac OS X 10.8+. Further information can be found in the &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Installation#mac-os-x"&gt;installation instructions&lt;/a&gt;.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Besides the Mac OS X work, we got 28 patches upstream and added the following features:
&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;Fix drawing in Photoshop CS5 (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=29871"&gt;Wine Bug #29871&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement general tab for file property dialog (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=357"&gt;Wine Staging Bug #357&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix SecuROM 5.x media validation (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21448"&gt;Wine Bug #21448&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix Xuzhou network client crash (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30378"&gt;Wine Bug #30378&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix wineserver crash when pipe server object is destroyed (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=393"&gt;Wine Staging Bug #393&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As usual you can find all the changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.46/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.45</title><link href="/news/2015-06-14-release-1.7.45.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-06-14-release-1.7.45.html</id><updated>2015-06-14T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.45&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 14 Jun 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Some hours ago Wine Staging 1.7.45 was released with several bug fixes and enhancements.
&lt;/p&gt;

&lt;p&gt;
Some applications use ICMP pings to check if a remote host / server is reachable, or to determine the round trip time. While Windows offers a special API to send ping requests and to receive the response, the only way to achieve the same on Linux/Unix based systems is to use raw sockets. For security reasons these sockets are limited to processes/users having the &lt;code&gt;CAP_NET_RAW&lt;/code&gt; capability, which means that such programs usually do not run out of the box in Wine. Manually adjusting capability flags fixes the problem, but also gives the program the permission to sniff traffic by other applications or users on the same interface.
&lt;/p&gt;

&lt;p&gt;
In order to partially solve this problem, we implemented a fallback in Wine which makes use of the &lt;code&gt;ping&lt;/code&gt; commandline tool if Wine does not have the necessary capabilities. The ping utility usually has the necessary permission and provides most of the functions offered by the Windows API. While this is not sufficient for special things like traceroutes, the most common use-case of sending simple requests in order to measure the round trip time works fine with this approach.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
One of the difficulties in Wined3d is to determine exact information about the hardware. While DirectX offers a way to get the amount of GPU memory or the PCI ID of the graphic card, a lot of this information is not accessible through the core OpenGL functions. So far Wined3d tries to match the graphic card name returned by OpenGL with an internal lookup table in order to fill out all these details. This is not always very precise and might result in false detections. One of the biggest problems is that the returned amount of detected VRAM is incorrect and the application tries to use more memory than available or decreases the graphic quality to stay within the reported limit.
&lt;/p&gt;

&lt;p&gt;
Some drivers like the NVIDIA and the Mesa driver added their own OpenGL extensions to gather these details and in this release we added support for the &lt;code&gt;NVX_GPU_MEMORY_INFO&lt;/code&gt; extension by NVIDIA. We use this extension to get the total amount of GPU memory and moreover report proper memory usage to Wined3d. This is necessary to implement correct memory accounting. In case of problems it is still possible to use the old behavior by manually adjusting the amount of memory in the registry.
&lt;/p&gt;

&lt;p&gt;
Besides the changes above, here is a list of all added features:
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add semi-stub for FileFsVolumeInformation information class (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=21466"&gt;Wine Bug #21466&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for winscard.SCardListReadersA/W (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=26978"&gt;Wine Bug #26978&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow to enable/disable InsertMode in wineconsole settings (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38697"&gt;Wine Bug #38697&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow to create Direct3D Device on desktop window (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=32194"&gt;Required by Juiced 2&lt;/a&gt; and various other applications)&lt;/li&gt;
	&lt;li&gt;Ensure console InsertMode changes take effect immediately (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=351"&gt;Wine Staging Bug #351&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fallback to system ping command when CAP_NET_RAW is not available (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=8332"&gt;Wine Bug #8332&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix endless loop in regedit when importing files with very long lines&lt;/li&gt;
	&lt;li&gt;Fix link notification conditions for riched20 (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=35949"&gt;Wine Bug #35949&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Forward GIF encoder requests to windowscodecs (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34356"&gt;Wine Bug #34356&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement advapi32.GetWindowsAccountDomainSid (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38624"&gt;Wine Bug #38624&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Implement default homepage button in inetcpl.cpl (Used by ReactOS)&lt;/li&gt;
	&lt;li&gt;Improve stub for NtQueryEaFile (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=353"&gt;Wine Staging Bug #353&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Initialize System\CurrentControlSet\Control\TimeZoneInformation registry keys (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=354"&gt;Wine Staging Bug #354&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Only send WM_DROPFILES when OLE dnd fails (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=29081"&gt;Wine Bug #29081&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Properly check existence of libunwind before linking against it (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38713"&gt;Wine Bug #38713&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return proper status codes when NtReadFile/NtWriteFile is called on closed (but not disconnected) pipe (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=336"&gt;Wine Staging Bug #336&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Set NamedPipeState to FILE_PIPE_CLOSING_STATE on broken pipe in NtQueryInformationFile (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=336"&gt;Wine Staging Bug #336&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Support for AT_ROUND_TO_PAGE flag in NtMapViewOfSection (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=347"&gt;Wine Staging Bug #347&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Support for NtSetInformationFile class FileLinkInformation (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=297"&gt;Wine Staging Bug #297&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Support for NtSetInformationFile class FileRenameInformation (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30399"&gt;Wine Bug #30399&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use NVX_GPU_MEMORY_INFO extension for more exact video memory accounting on NVIDIA graphic cards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As usual you can also find all changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.45/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.44</title><link href="/news/2015-05-31-release-1.7.44.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-05-31-release-1.7.44.html</id><updated>2015-05-31T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.44&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 31 May 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Today we released Wine Staging 1.7.44 with several bug fixes and switched to our new build system for our prebuilt packages. Currently most of our effort goes into fixing bugs instead of adding new features, so we also changed the format of the release notes a bit. Before we tell you more about the build system changes, here is a list of all fixed bugs / added features in this release (without any particular order).
&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Add shell32 placeholder icons to match offsets with Windows, required by SuperPower 2 demo (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=30185"&gt;Wine Bug #30185&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stub for iphlpapi.ConvertInterfaceLuidToGuid, required by PES2015 (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38576"&gt;Wine Bug #38576&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Add stubbed ISWbemSecurity interfaces in wbemdisp (Required by Paessler WMI Tester)&lt;/li&gt;
	&lt;li&gt;Add support for hiding wine version information from applications (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38656"&gt;Wine Bug #38656&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Allow to enable/disable InsertMode in wineconsole settings (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=36704"&gt;Wine Bug #36704&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Also handle '\r' as whitespace in wbemprox queries (Required by Paessler WMI Tester)&lt;/li&gt;
	&lt;li&gt;Also output winedbg system information to the terminal, not only to dialog&lt;/li&gt;
	&lt;li&gt;Assign a drive serial number during prefix creation/update (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=17823"&gt;Wine Bug #17823&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Do not use unixfs for devices without mountpoint (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=8005"&gt;Required by 2xExplorer&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix NULL pointer dereference in get_frame_by_name effecting various Web installers (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=34982"&gt;Wine Bug #34982&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix crash in Gothic 1/2 with builtin directmusic caused by wrong return value (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=7425"&gt;Wine Bug #7425&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix handling of opening a file with RootDirectory pointing to a file handle, required by Msys2 (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=299"&gt;Wine Staging Bug #299&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Fix scaling behaviour of images and mipmap levels in IDirect3DTexture2_Load (&lt;a href="https://appdb.winehq.org/objectManager.php?sClass=version&amp;iId=31341"&gt;Required by Prezzie Hunt&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Return fake device type when systemroot is located on virtual disk (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=36546"&gt;Wine Bug #36546&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Revert upstream regression which causes broken rendering in various games (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38654"&gt;Wine Bug #38654&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Support for ws2_32.dll.WSAPoll, required by Planetary Annihilation (&lt;a href="https://bugs.winehq.org/show_bug.cgi?id=38601"&gt;Wine Bug #38601&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;Use random names when caching very long urls in wininet (&lt;a href="https://bugs.wine-staging.com/show_bug.cgi?id=300"&gt;Wine Staging Bug #300&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
As usual you can find all the changes (including removed/upstream accepted patches) in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.44/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
There are also various changes regarding our build servers. We provide packages for a lot of distributions and some of them (Debian Jessie or newer, Arch Linux, Mageia) are directly built by our own servers. In the past we used LXC containers to optimize the performance, but this solution was too fragile. Many distributions do not work out of the box in LXC containers and might break on any update. Starting with this release we switched to our new KVM based build system which provides many advantages over our last approach. As part of this step we added &lt;b&gt;Debian Stretch&lt;/b&gt; and &lt;b&gt;Mageia 5&lt;/b&gt; as build target and removed AVLinux 6. AVLinux is moving away from Debian Squeeze to Jessie and does no longer provide updates, so we didn't move it to our new build server. We still provide Wine Staging 1.7.42 for download though.
&lt;/p&gt;

&lt;p&gt;
We also added a test VM which is used for daily test runs of the Wine tests. This should help us to detect new regressions in Wine staging. We already used the wine tests manually when adding a new patch, but the executed tests were often limited to the changed component (because running all tests takes a lot of time) and were run in a non-clean environment. There are still some small tasks left to ensure that the pre-requirements for all tests are met, but after fixing those, the test results will be uploaded to our website and updated daily.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.43</title><link href="/news/2015-05-17-release-1.7.43.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-05-17-release-1.7.43.html</id><updated>2015-05-17T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.43&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 17 May 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.7.43 was released yesterday with a lot of bug fixes in wininet and various other parts of Wine.
&lt;/p&gt;

&lt;p&gt;
The upstream wininet implementation behaves different compared to Windows in various ways if an application replaces the Host header in a HTTP request. While trying to fix these problems, several other issues were discovered. This release adds a total of 13 patches to fix incorrect handling of HTTP header fields, handling of cookies and HTTP authentication. In addition a memory leak was fixed that was triggered by HTTP requests containing a cookie.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
We also continued working on our plans to categorize our patches. So far we don't have a "highly experimental" category yet, but all patches and patchsets are now properly categorized into a stable/unstable category. The stable category only contains patches which are unlikely to change during the next time. They were tested long enough to ensure that they do not introduce any critical regressions, and there are no immediate plans to improve them (besides probably minor reformatting in order to get them accepted upstream). It is possible to enable only those patches by passing &lt;code&gt;category-stable&lt;/code&gt; to our patchinstall.sh script instead of &lt;code&gt;--all&lt;/code&gt;. However, this also disables commonly used experimental patchsets like CSMT or CUDA and is therefore mostly useful for regression testing or to keep track of the state of patches.
&lt;/p&gt;

&lt;p&gt;
Besides the features mentioned above, this release also contains some smaller patches. This includes a fix for the broken directory enumeration on FreeBSD, fixes for Xfire 2 and for Steam in Windows 7 mode. As usual you can find all the changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.43/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.42</title><link href="/news/2015-05-04-release-1.7.42.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-05-04-release-1.7.42.html</id><updated>2015-05-04T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.42&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Mon, 04 May 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Time for another release! We pushed Wine Staging 1.7.42 yesterday, this time with a small delay. Besides fixes for various bugs we've been working on a category system to simplify the task of maintaining our huge amount of patches.
&lt;/p&gt;

&lt;p&gt;
When we started working on Wine Staging the idea was to provide experimental features and improve them over time until they are ready to be included into upstream wine. Even though our name implies that the version is (or at least can be) highly experimental, many users started using Staging as their default wine version. This makes it difficult to add very experimental patches while ensuring that they do not introduce regressions and therefore the demand for a more stable version increased.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
We came to the conclusion that it is not possible to maintain only one patchset if we don't want to reject work-in-progress patches. In order to solve this problem Staging 1.7.42 adds a category system, which will be used to categorize patches based on their "stability". In the future experimental patches which might have a big risk of breaking things (or have known regressions) will be added to a special category, which has to be enabled manually. More information about the category system will follow until the next release.
&lt;/p&gt;

&lt;p&gt;
Moreover, this release also added some smaller patches for games running in Origin and various other applications. As usual you can find all the changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.42/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;


                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.41</title><link href="/news/2015-04-19-release-1.7.41.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-04-19-release-1.7.41.html</id><updated>2015-04-19T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.41&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 19 Apr 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.7.41 is out and provides small improvements and bug fixes for several applications. This release is a bit more lightweight than usual as we have a lot of infrastructure work going on behind the scenes.
&lt;/p&gt;

&lt;p&gt;
Debugging Wine applications is a non trivial task and it is often difficult to get proper debug output. You often end up with huge log files and need to find a needle in a haystack. With Wine Staging 1.7.41 we added process specific debug channels so that you can set different debugging flags based on the executable name. This is especially useful if you need to debug an application which needs to be started through a launcher or programs like Uplay. More information about this feature is available in our &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Debug"&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
This release also contains bug fixes for several applications. For example Origin is now able to update itself and you can play Burnout Paradise online. In case you are using Wine Staging in order to play AOE 2 with Voobly, you can safely upgrade to 1.7.41 as the upstream regression introduced in 1.7.40 is now fixed. As usual you can find all other changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.41/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
In case you are wondering about which infrastructure changes we are talking: There is work going on to create a similar website to WineHQ's &lt;a href="https://appdb.winehq.org/"&gt;AppDB&lt;/a&gt;. The website will not only provide you with test results about programs running in Wine Staging, but will also collect information from other sources. This provides an easy way to compare the results of different wine distributions and allows you to choose the version which works best with your application.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.40</title><link href="/news/2015-04-05-release-1.7.40.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-04-05-release-1.7.40.html</id><updated>2015-04-05T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.40&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 05 Apr 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.7.40 was released some hours ago and there are various new features available for testing. The main additions since the last release are EAX sound support (software emulated), support for realtime priorities and better handling of .NET executables.
&lt;/p&gt;

&lt;p&gt;
In 1998 Creative introduced Environmental Audio Extensions (EAX) for their sound blaster sound cards which provides a way to apply sound effects using the DSP of the sound card. This made it possible to use advanced audio effects using DirectSound without increasing the CPU usage. Modern CPUs can easily handle such calculations and we therefore started to implement an EAX software emulation in Wine. This release adds most of the stuff required for EAX 1 and gives you the possibility to enjoy these sound effects in old games even without creative hardware.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
We started improving the performance of Wine in the last release by implementing shared memory communication and now we go a step further by adding (optional) realtime priority support to wine. This patchset gives the user the possibility to assign a realtime priority to a program or the wineserver. Changing the priority on the wineserver is especially useful for communication which cannot easily be removed by using shared memory. The high priority will allow the wineserver to process roughly twice the usual amount of requests (for wineserver-call limited applications). The feature is currently only supported on Linux and needs some manual configuration as described in our &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/Environment-Variables#realtime-priorities"&gt;Wiki&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
So far Wine was loading .NET executables by using a fallback mechanism which is embedded into those executable to support Windows 2000 and older Windows versions. Modern Windows versions handle .NET executables in a special way and do no longer need this fallback path. The disadvantage of using the fallback code is that it allows injection of native code into .NET executables and is therefore less secure. Moreover recent .NET versions started to drop this compatibility code (at least on 64 bit), so Wine can no longer load them. In order to fix both issues, the PE loader of Wine Staging was extended to handle .NET executables in the same way as on Windows XP and above.
&lt;/p&gt;

&lt;p&gt;
Besides these new features we also added several bug fixes. As usual you can find all other changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.40/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.39</title><link href="/news/2015-03-22-release-1.7.39.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-03-22-release-1.7.39.html</id><updated>2015-03-22T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.39&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 22 Mar 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Wine Staging 1.7.39 was released a couple of hours ago. This release mostly concentrates on speed optimizations and various bug fixes related to keyboard input handling.
&lt;/p&gt;

&lt;p&gt;
One of the slowest things in Wine are wineserver calls. These calls are necessary if an applications wants to set or get an value which affects multiple programs, for example asking for the current foreground window. While this information is usually managed by the kernel on Windows, a program running in Wine needs to send a message to wineserver via a pipe and wait for the reply. Since the wineserver is a separate process the overhead of waking it up is very big, causing these calls to be about 10 times slower than on windows.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
In this release we started implementing shared memory communication as an alternative. Instead of using shared memory for all wineserver calls, we decided to optimize specific frequently used functions and to prevent waking up the wineserver at all if possible. A call to &lt;code&gt;PeekMessage&lt;/code&gt; for example will not wake up the wineserver as long as there are no messages available. For some functions like &lt;code&gt;GetActiveWindow&lt;/code&gt; it was possible to eliminate the pipe communication in all cases. Since these changes affect many parts of Wine and might still contain some bugs, this feature is disabled by default and needs to enabled manually by setting the environment variable &lt;code&gt;STAGING_SHARED_MEMORY&lt;/code&gt; to 1.
&lt;/p&gt;

&lt;p&gt;
In order to retain security, the code requires support for memfds and file sealing which is only available on Linux with Kernel versions &gt;= 3.17. We might add compatibility code soon, to make this feature also available on older Kernels or also other platforms like FreeBSD and MacOS X, but currently we're still focusing on testing and doing performance measurements.
&lt;/p&gt;

&lt;p&gt;
Besides this new feature we also added several bug fixes related to keyboard input handling affecting for example "Photoshop CS5", the application "Sculptris" and also the game "La-Mulana". As usual you can find all other changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.39/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.38</title><link href="/news/2015-03-07-release-1.7.38.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-03-07-release-1.7.38.html</id><updated>2015-03-07T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.38&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sat, 07 Mar 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
We are happy to announce Staging 1.7.38. This release introduces Job Object support and many other small bug fixes and improvements. Besides the new additions, 16 patches got removed because they were accepted upstream. Wine Staging consists now of more than 600 patches total.
&lt;/p&gt;

&lt;p&gt;
The Job Object API provides ways to manage groups of processes as a single object and is required by various applications like EA Origin, which uses this feature to detect whether games are still running. Although Job Objects are not really a "new" feature and were already available since Windows 2000, a Wine implementation was still missing so far. One year ago Andrew Cook started to work on an implementation and we recently teamed up with him to clean up the patches and to integrate this feature into Wine Staging. The code is not yet complete, but it is sufficient to make EA Origin happy.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
The work on DXVA2 continued and decoding of MPEG2 and H264 content using ffmpeg / libavcodec based software is now working stable. There are still other Wine bugs which prevent programs like VLC from using DXVA2 without hacks, but we hope to fix them in future versions. We also added support for video decoding through libva-drm (besides libva-x11) which makes it possible to use a different GPU for video decoding than the one which is used by the X server.
&lt;/p&gt;

&lt;p&gt;
Thanks to our cooperation with ReactOS we also made various improvements to the shell32 part of Wine, and added an implementation for a proper file-copy and move dialog. We are planning to extend this cooperation a bit further in the future to share more ideas and existing code.
&lt;/p&gt;

&lt;p&gt;
As usual you can find all other changes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.38/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.37</title><link href="/news/2015-02-22-release-1.7.37.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-02-22-release-1.7.37.html</id><updated>2015-02-22T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.37&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 22 Feb 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Two weeks passed by and it is time for another Wine release. Before talking too much about Wine staging 1.7.37, we are happy to announce that two important features, UTF-7 support (included since Wine Staging 1.7.29) and interface change notification support (included since first version of Wine Staging) got upstream.
&lt;/p&gt;

&lt;p&gt;
The main focus of this Wine Staging release is the implementation of the DirectX Video Acceleration 2 (DXVA2) API based on VAAPI. This API is available since Vista and provides GPU accelerated functions for video processing, like video decoding or deinterlacing. We initially had this idea about a year ago (mainly to improve video playback via Pipelight), but stopped working on it when it became clear that getting it upstream will be a very long or even impossible process. The implementation we added now to Wine Staging already contains various improvements compared to the initial proof-of-concept code. We improved MPEG2 video decoding support and added support for H264 decoding. We decided to use VAAPI as back-end since it is very similar to DXVA2, but wrote the implementation in such a way that it can easily support multiple back-ends later. While VAAPI mainly targets Intel based GPUs there are wrappers for the open source and proprietary drivers of AMD / NVIDIA GPUs as well, so you can also use DXVA2 through VAAPI on non-Intel systems.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
The current status is very experimental and there are a lot of know bugs, especially when using the Intel VAAPI driver, so we decided to disable it by default. If you want to play with it anyway, you can enable the feature through the Staging tab in winecfg. We do not recommend to enable this for Intel GPUs yet, since their driver is not very fault tolerant and blindly trusts the values passed by the application. Some distributions forgot to disable the assertions while compiling the driver causing the application to abort even for non-fatal problems. For other systems like NVIDIA the implementation works quite good and it is possible to use it for watching videos. The current implementation is for example sufficient to use hardware decoding in Flash through Pipelight as you can see on this YouTube screenshot:
&lt;/p&gt;

&lt;p&gt;
&lt;center&gt;
	&lt;img src="/images/flash-dxva2-news.png" /&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;
We hope that we can extend DXVA2 and fix the remaining problems till the next release. Although the current patches already add over 4500 lines of code for this DLL, it is far away from being complete, nevertheless we wanted to share the code in order to give other developers the chance to participate.
&lt;/p&gt;

&lt;p&gt;
As usual there are also a lot of smaller patches and bug fixes which you can find in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.37/debian/changelog"&gt;changelog&lt;/a&gt;, including various patches to improve network support of .NET/Silverlight. From now on, not only the wine users might profit from our improvements, but also the &lt;a href="https://jira.reactos.org/browse/CORE-9246"&gt;ReactOS users&lt;/a&gt;, since ReactOS decided to switch to Wine Staging as upstream source for Wine.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.36</title><link href="/news/2015-02-08-release-1.7.36.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-02-08-release-1.7.36.html</id><updated>2015-02-08T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.36&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sun, 08 Feb 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
We just released Wine Staging 1.7.36 and we are happy to announce some interesting new features in this version. A lot of work went into the implementation of the Threadpool API framework, which is available on Windows Vista and newer. The Threadpool API provides a lot of convenience functions to simplify writing multithreaded programs, for example to assign work items to a pool of worker threads, wait for their execution and call cleanup handlers afterwards. The number of applications using this API is steadily increasing, so we decided that its definitely time to add an implementation. There are still some unimplemented functions left but the core components are available now and sufficient for most applications, including Adobe Lightroom 5.3.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Another addition of 1.7.36 is the nvencodeapi.dll implementation which makes it possible to use the GPU encoding engine NVENC by NVIDIA. NVENC is a successor of the CUDA based nvcuvenc and is available for Kepler / Maxwell based NVIDIA cards (i.e. Geforce &gt;= 600). Unlike nvcuvenc, which can be used in Wine Staging through the native dll, nvencodeapi.dll is a wrapper to the libnvidia-encode.so library. The wrapper implements NVENC 5.0 and requires at least version 346.22 of the linux NVIDIA driver. While the current implementation is feature complete, it lacks asynchronous encoding mode since the linux drivers does not support it yet. At the moment the asynchronous mode is emulated using the synchronous mode which may decrease the performance. We are looking forward to add a more efficient emulation in the next release.
&lt;/p&gt;

&lt;p&gt;
As usual there were also some other small improvements like an upgrade of the CUDA wrapper to CUDA 7.0 RC and fixes for mouse jittering in games like Planetside 2. The full list of changes is available in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.36/debian/changelog"&gt;changelog&lt;/a&gt;.
&lt;/p&gt;
                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.35</title><link href="/news/2015-01-24-release-1.7.35.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-01-24-release-1.7.35.html</id><updated>2015-01-24T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.35&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sat, 24 Jan 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;
Today we released Wine Staging 1.7.35 which introduces the basis for further interesting features. This release is not as exciting as the last one from a user perspective, but contains quite some important changes for developers and contributors. We added a driver testing framework in Wine Staging which should help us to improve the ntoskrnl.exe component of Wine. Besides that Wine Staging 1.7.35 also contains various new patches and improvements, for example several improvements of CUDA support (which was added in the last release), patches to fix broken raw input in multiple games (upstream regression, which exists since 1.5.29 in upstream Wine), and also patches for Child of Light and Valiant Hearts.
&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;
Most hardware related device drivers do not work in Wine by design, because Wine executes them only with user mode permissions and they can't directly access the hardware. Nevertheless, there are also some drivers which work perfectly fine without communicating to hardware, for example anti cheat software or copy protection drivers. In order to improve the support for such drivers, we implemented a testing framework, which allows to write kernel driver tests. ReactOS already provides a similar testing framework since some time, but so far Wine developers didn't have any suitable solution yet. Hopefully this feature will allow developers to extend the functionality a bit faster in the future, while ensuring that it is still compatible with Windows.
&lt;/p&gt;

&lt;p&gt;
Whereas generic hardware access is impossible, specific devices can be emulated by using equivalent Linux libraries. In the past there were already several interesting ideas like attempts to integrate USB driver support via &lt;code&gt;libusb&lt;/code&gt; into Wine, which were not accepted because of missing tests. We were planning to look at some of this previous work, and check if its possible to integrate that into our staging tree.
&lt;/p&gt;

&lt;p&gt;As usual you can find all remaining bug fixes in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.35/debian/changelog"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
We also did several changes of our infrastructure. As you might have noticed this website looks a bit different now, and we're now also hosting our own bugtracker instead of using the github integrated one.
&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.34</title><link href="/news/2015-01-10-release-1.7.34.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2015-01-10-release-1.7.34.html</id><updated>2015-01-10T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.34&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Sa, 10 Jan 2015&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;We are happy to announce some major new features for Wine Staging 1.7.34, which were developed during the Christmas holidays. Upstream Wine skipped the last release which gave us the possibility to add more new features than usual in this release. One of the new features is support for CUDA, the GPU calculation platform used by NVIDIA graphic cards.&lt;/p&gt;

&lt;p&gt;Staging 1.7.34 contains a wrapper for &lt;code&gt;nvcuda.dll&lt;/code&gt; which redirects the function calls to the native &lt;code&gt;libcuda.so&lt;/code&gt;. Previous approaches tried to wrap &lt;code&gt;cudart.dll&lt;/code&gt; (the cuda runtime dll), but in contrast to our solutions this does not work for statically linked CUDA programs. The implementation is not yet complete and misses some Direct3D interop functions, which are rarely used by applications. If you would like to test this new feature make sure to read our Wiki entry about &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/CUDA"&gt;CUDA&lt;/a&gt; to ensure that everything is set up correctly.&lt;/p&gt;

&lt;!--PREVIEW--&gt;

&lt;p&gt;Another new feature which directly depends on CUDA is GPU accelerated PhysX support. This feature is still a bit experimental since PhysX depends on a working &lt;code&gt;nvapi.dll&lt;/code&gt; implementation. This dll is part of the NVIDIA driver on Windows and provides functions to query and alter graphic cards settings. Our current implementation is sufficient for the software we tested but might not work for all games. In order to use PhysX you need to install the necessary files as explained in our Wiki entry about &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/PhysX"&gt;PhysX&lt;/a&gt;. We tested several PhysX benchmarks and also the Windows version of Borderlands 2, but feel free to tell us your results in our bug tracker or on our IRC channel (#wine-staging on FreeNode).&lt;/p&gt;

&lt;p&gt;Last but not least we also added message mode support for named pipes on Linux. In contrary to byte-based communication methods this mode allows applications to send and receive full packages/messages. Linux kernel 3.4 introduced the &lt;code&gt;SO_PEEK_OFF&lt;/code&gt; socket option which can be used in conjunction with sequential packets (&lt;code&gt;SOCK_SEQPACKET&lt;/code&gt;) to emulate such a message mode on Linux. The current implementation already fixes a lot of bugs but is not completely race-condition free, for example when multiple threads peek messages from the same pipe. These bugs can not be solved without kernel changes, but we are confident that we can solve this problem in cooperation with the kernel developers. We are also open to idea from *BSD kernel hackers in order to implement the same feature on BSD based system.&lt;/p&gt;

&lt;p&gt;As usual you can find all remaining bug fixes, like the experimental patch for the Hearthstone timeout bug, in our &lt;a href="https://github.com/wine-compholio/wine-staging/blob/v1.7.34/debian/changelog"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS: This release also completes the name change from &lt;code&gt;wine-compholio&lt;/code&gt; to &lt;code&gt;wine-staging&lt;/code&gt; for our provided packages. The packages are currently building and will shortly be available under their new name.&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry><entry><title>Release 1.7.33</title><link href="/news/2014-12-15-release-1.7.33.html" rel="alternate"></link><id>http://www.wine-staging.com/news/2014-12-15-release-1.7.33.html</id><updated>2014-12-15T00:00:00Z</updated><author><name>Wine Staging Team</name></author><content type="html">
        &lt;div class="post"&gt;
                &lt;h2 class="title"&gt;Release 1.7.33&lt;/h2&gt;
                &lt;p class="meta"&gt;&lt;span class="author"&gt;Wine Staging Team&lt;/span&gt;&amp;nbsp;-&amp;nbsp;&lt;span class="date"&gt;Mon, 15 Dec 2014&lt;/span&gt;&lt;/p&gt;
                &lt;div class="entry"&gt;
                    &lt;p&gt;We just released the updated patchset for Wine 1.7.33. Besides the 29 bugs fixed upstream since the last release, we have added about 14 additional bug fixes to Wine Staging. You can take a look at the &lt;a href="https://raw.githubusercontent.com/wine-compholio/wine-staging/v1.7.33/debian/changelog"&gt;changelog&lt;/a&gt; for the full list of changes. There is one feature I would like to point out since it was requested a lot by our users: CSMT (command stream multithreaded) support.&lt;/p&gt;

&lt;p&gt;Although originally announced by Codeweavers employee Stefan Dösinger about a year ago, there still wasn't much progress with upstreaming these patches. We were hesitating to add these patches in the past because they are known to have a negative effect for some apps. Thanks to the newly introduced &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/DLL-Redirects"&gt;dll redirection scheme&lt;/a&gt; it was possible to add it anyway, by providing a CSMT and a non-CSMT version of wined3d. In order to test the CSMT feature, it is sufficient to enable it in &lt;code&gt;winecfg&lt;/code&gt; - take a look &lt;a href="https://github.com/wine-compholio/wine-staging/wiki/DLL-Redirects"&gt;here&lt;/a&gt; for instructions how to do that.&lt;/p&gt;

                    
                &lt;/div&gt;
            &lt;/div&gt;
    </content></entry></feed>